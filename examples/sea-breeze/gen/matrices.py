from sympy import Matrix, var, pprint, simplify, zeros

def latex(e):
    from sympy import latex as l
    s = l(e)
    return s[1:-1]

def diag(l):
    n = len(l)
    D = zeros((n, n))
    for i, v in enumerate(l):
        D[i, i] = v
    return D

var("u v w c kappa")
v2 = u**2 + v**2 + w**2
R = Matrix([
    [1,   1, 1,   1,   1  ],
    [u-c, u, u,   u,   u+c],
    [v,   v, v-c, v,   v  ],
    [w,   w, w,   w-c, w  ],
    [v2/2+c**2/(kappa-1) - u*c,   v2/2, v2/2 - v*c,   v2/2 - w*c,
        v2/2 + c**2/(kappa-1) + u*c],
    ])
print "R_inv"
R_inv_times_c2 = (R.inv()*c**2).applyfunc(simplify)
D = diag([u-c, u, u, u, u+c])
D_minus1 = diag([u-c, u, u, u, 0])
D_minus2 = diag([u-c, 0, 0, 0, 0])
print "A"
A = (R*D*R_inv_times_c2/c**2).applyfunc(simplify)
print "A_minus1"
A_minus1 = (R*D_minus1*R_inv_times_c2/c**2).applyfunc(simplify)
print "A_minus2"
A_minus2 = (R*D_minus2*R_inv_times_c2/c**2).applyfunc(simplify)

print "-"*80
print r"""
.. ####### beginning of autogenerated text #######

Explicit forms of the matrices:

.. math::

    {\bf R} = %s

    {\bf R}^{-1} = {1\over c^2} %s

    {\bf D}_x = %s

    {\bf A}_x = %s

For $u_1<0$:

.. math::

    {\bf D}_x^- = %s

    {\bf A}_x^- = %s

For $u_1>0$:

.. math::

    {\bf D}_x^- = %s

    {\bf A}_x^- = %s

.. ####### end of autogenerated text #######
""" % (
    latex(R),
    latex(R_inv_times_c2),
    latex(D),
    latex(A),
    latex(D_minus1),
    latex(A_minus1),
    latex(D_minus2),
    latex(A_minus2),
    )
