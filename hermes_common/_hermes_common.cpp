/* Generated by Cython 0.12.1 on Fri May 14 12:13:30 2010 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) PyInstanceMethod_New(func)
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API___hermes_common
#include "math.h"
#include "stdlib.h"
#include "arrayobject.h"
#include "stdcython.h"
#include "matrix.h"

/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE 
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__)) 
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__)) 
# else
#   define CYTHON_UNUSED 
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;
static const char **__pyx_f;


#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif

#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif

/* Type declarations */

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":18
 * # Matrix classes:
 * 
 * cdef class Matrix:             # <<<<<<<<<<<<<<
 *     cdef c_Matrix *thisptr
 * 
 */

struct __pyx_obj_14_hermes_common_Matrix {
  PyObject_HEAD
  struct Matrix *thisptr;
};

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":27
 *         self.thisptr.add(m, n, v)
 * 
 * cdef class SparseMatrix(Matrix):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */

struct __pyx_obj_14_hermes_common_SparseMatrix {
  struct __pyx_obj_14_hermes_common_Matrix __pyx_base;
};

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":83
 *         return str(self.to_scipy_coo())
 * 
 * cdef class CSRMatrix(SparseMatrix):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, M):
 */

struct __pyx_obj_14_hermes_common_CSRMatrix {
  struct __pyx_obj_14_hermes_common_SparseMatrix __pyx_base;
};

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":30
 *     pass
 * 
 * cdef class CooMatrix(SparseMatrix):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, size=0, is_complex=False):
 */

struct __pyx_obj_14_hermes_common_CooMatrix {
  struct __pyx_obj_14_hermes_common_SparseMatrix __pyx_base;
};

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":137
 *         return str(self.to_scipy_csr())
 * 
 * cdef class CSCMatrix(SparseMatrix):             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, M):
 */

struct __pyx_obj_14_hermes_common_CSCMatrix {
  struct __pyx_obj_14_hermes_common_SparseMatrix __pyx_base;
};

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(void);

static PyObject *__Pyx_UnpackItem(PyObject *, Py_ssize_t index); /*proto*/
static int __Pyx_EndUnpack(PyObject *); /*proto*/

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif

#if defined(_WIN32) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    /*#define __Pyx_c_abs(z)     (::std::abs(z))*/
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    /*#define __Pyx_c_abs(z)     (cabs(z))*/
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    /*static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);*/
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list); /*proto*/

static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject*);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static void __Pyx_WriteUnraisable(const char *name); /*proto*/

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, long size, int strict);  /*proto*/

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from numpy */

/* Module declarations from _hermes_common */

static PyTypeObject *__pyx_ptype_14_hermes_common_ndarray = 0;
static PyTypeObject *__pyx_ptype_14_hermes_common_Matrix = 0;
static PyTypeObject *__pyx_ptype_14_hermes_common_SparseMatrix = 0;
static PyTypeObject *__pyx_ptype_14_hermes_common_CooMatrix = 0;
static PyTypeObject *__pyx_ptype_14_hermes_common_CSRMatrix = 0;
static PyTypeObject *__pyx_ptype_14_hermes_common_CSCMatrix = 0;
static PyObject *c2numpy_int(int *, int); /*proto*/
static PyObject *c2numpy_double(double *, int); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_14_hermes_common_cp2str(const char*); /*proto*/
static CYTHON_INLINE char* __pyx_f_14_hermes_common_str2cp(PyObject *); /*proto*/
static struct __pyx_obj_14_hermes_common_Matrix *__pyx_f_14_hermes_common_py2c_Matrix(PyObject *); /*proto*/
static PyObject *c2py_CooMatrix(struct CooMatrix *); /*proto*/
static PyObject *c2py_CSRMatrix(struct CSRMatrix *); /*proto*/
static PyObject *c2py_CSCMatrix(struct CSCMatrix *); /*proto*/
static PyObject *namespace_create(void); /*proto*/
static void namespace_push(PyObject *, const char*, PyObject *); /*proto*/
static void namespace_print(PyObject *); /*proto*/
static PyObject *namespace_pull(PyObject *, const char*); /*proto*/
static void cmd(const char*); /*proto*/
static void set_verbose_cmd(int); /*proto*/
static void insert_object(const char*, PyObject *); /*proto*/
static PyObject *get_object(const char*); /*proto*/
static PyObject *c2py_int(int); /*proto*/
static int py2c_int(PyObject *); /*proto*/
static char *py2c_str(PyObject *); /*proto*/
static double py2c_double(PyObject *); /*proto*/
static PyObject *c2numpy_int_inplace(int *, int); /*proto*/
static PyObject *c2numpy_double_inplace(double *, int); /*proto*/
static PyObject *c2numpy_double_complex_inplace(__pyx_t_double_complex *, int); /*proto*/
static void numpy2c_int_inplace(PyObject *, int **, int *); /*proto*/
static void numpy2c_double_inplace(PyObject *, double **, int *); /*proto*/
static void numpy2c_double_complex_inplace(PyObject *, __pyx_t_double_complex **, int *); /*proto*/
static void run_cmd(const char*, PyObject *); /*proto*/
#define __Pyx_MODULE_NAME "_hermes_common"
int __pyx_module_is_main__hermes_common = 0;

/* Implementation of _hermes_common */
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_Exception;
static PyObject *__pyx_builtin_compile;
static PyObject *__pyx_builtin_eval;
static PyObject *__pyx_builtin_SystemExit;
static char __pyx_k_2[] = "get_row_col_data_cplx";
static char __pyx_k_3[] = "scipy.sparse";
static char __pyx_k_4[] = "Not implemented.";
static char __pyx_k_5[] = "-";
static char __pyx_k_6[] = "namespace:";
static char __pyx_k_7[] = "got a text:";
static char __pyx_k_8[] = "evaluting in the namespace:";
static char __pyx_k_9[] = "";
static char __pyx_k_10[] = "new namespace:";
static char __pyx_k_11[] = "Exception raised in the Python code:\n";
static char __pyx_k_12[] = "CooMatrix.row_col_data (line 42)";
static char __pyx_k_13[] = "CooMatrix.to_scipy_coo (line 71)";
static char __pyx_k_14[] = "CSRMatrix.IA (line 99)";
static char __pyx_k_15[] = "CSRMatrix.JA (line 107)";
static char __pyx_k_16[] = "CSRMatrix.A (line 115)";
static char __pyx_k_17[] = "CSRMatrix.to_scipy_csr (line 126)";
static char __pyx_k_18[] = "CSCMatrix.IA (line 153)";
static char __pyx_k_19[] = "CSCMatrix.JA (line 161)";
static char __pyx_k_20[] = "CSCMatrix.A (line 169)";
static char __pyx_k_21[] = "CSCMatrix.to_scipy_csc (line 180)";
static char __pyx_k__A[] = "A";
static char __pyx_k__M[] = "M";
static char __pyx_k__m[] = "m";
static char __pyx_k__n[] = "n";
static char __pyx_k__v[] = "v";
static char __pyx_k__IA[] = "IA";
static char __pyx_k__JA[] = "JA";
static char __pyx_k__nd[] = "nd";
static char __pyx_k___AA[] = "_AA";
static char __pyx_k__add[] = "add";
static char __pyx_k__get[] = "get";
static char __pyx_k__sys[] = "sys";
static char __pyx_k__data[] = "data";
static char __pyx_k__eval[] = "eval";
static char __pyx_k__exec[] = "exec";
static char __pyx_k__flat[] = "flat";
static char __pyx_k__join[] = "join";
static char __pyx_k__size[] = "size";
static char __pyx_k__array[] = "array";
static char __pyx_k__dtype[] = "dtype";
static char __pyx_k__empty[] = "empty";
static char __pyx_k__get_A[] = "get_A";
static char __pyx_k__int32[] = "int32";
static char __pyx_k__numpy[] = "numpy";
static char __pyx_k__shape[] = "shape";
static char __pyx_k__double[] = "double";
static char __pyx_k__get_IA[] = "get_IA";
static char __pyx_k__get_JA[] = "get_JA";
static char __pyx_k__update[] = "update";
static char __pyx_k__compile[] = "compile";
static char __pyx_k__get_nnz[] = "get_nnz";
static char __pyx_k__strides[] = "strides";
static char __pyx_k__thisptr[] = "thisptr";
static char __pyx_k__verbose[] = "verbose";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__add_cplx[] = "add_cplx";
static char __pyx_k__exc_info[] = "exc_info";
static char __pyx_k__get_size[] = "get_size";
static char __pyx_k__property[] = "property";
static char __pyx_k__CSCMatrix[] = "CSCMatrix";
static char __pyx_k__CSRMatrix[] = "CSRMatrix";
static char __pyx_k__CooMatrix[] = "CooMatrix";
static char __pyx_k__Exception[] = "Exception";
static char __pyx_k__traceback[] = "traceback";
static char __pyx_k__SystemExit[] = "SystemExit";
static char __pyx_k__complex128[] = "complex128";
static char __pyx_k__coo_matrix[] = "coo_matrix";
static char __pyx_k__csc_matrix[] = "csc_matrix";
static char __pyx_k__csr_matrix[] = "csr_matrix";
static char __pyx_k__get_A_cplx[] = "get_A_cplx";
static char __pyx_k__is_complex[] = "is_complex";
static char __pyx_k__row_col_data[] = "row_col_data";
static char __pyx_k__to_scipy_coo[] = "to_scipy_coo";
static char __pyx_k__to_scipy_csc[] = "to_scipy_csc";
static char __pyx_k__to_scipy_csr[] = "to_scipy_csr";
static char __pyx_k__triplets_len[] = "triplets_len";
static char __pyx_k__format_exception[] = "format_exception";
static char __pyx_k__get_row_col_data[] = "get_row_col_data";
static char __pyx_k__global_namespace[] = "global_namespace";
static char __pyx_k__triplets_len_cplx[] = "triplets_len_cplx";
static PyObject *__pyx_kp_s_10;
static PyObject *__pyx_kp_s_11;
static PyObject *__pyx_kp_u_12;
static PyObject *__pyx_kp_u_13;
static PyObject *__pyx_kp_u_14;
static PyObject *__pyx_kp_u_15;
static PyObject *__pyx_kp_u_16;
static PyObject *__pyx_kp_u_17;
static PyObject *__pyx_kp_u_18;
static PyObject *__pyx_kp_u_19;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_kp_u_20;
static PyObject *__pyx_kp_u_21;
static PyObject *__pyx_n_s_3;
static PyObject *__pyx_kp_s_4;
static PyObject *__pyx_kp_s_5;
static PyObject *__pyx_kp_s_6;
static PyObject *__pyx_kp_s_7;
static PyObject *__pyx_kp_s_8;
static PyObject *__pyx_kp_s_9;
static PyObject *__pyx_n_s__A;
static PyObject *__pyx_n_s__CSCMatrix;
static PyObject *__pyx_n_s__CSRMatrix;
static PyObject *__pyx_n_s__CooMatrix;
static PyObject *__pyx_n_s__Exception;
static PyObject *__pyx_n_s__IA;
static PyObject *__pyx_n_s__JA;
static PyObject *__pyx_n_s__M;
static PyObject *__pyx_n_s__SystemExit;
static PyObject *__pyx_n_s___AA;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s__add;
static PyObject *__pyx_n_s__add_cplx;
static PyObject *__pyx_n_s__array;
static PyObject *__pyx_n_s__compile;
static PyObject *__pyx_n_s__complex128;
static PyObject *__pyx_n_s__coo_matrix;
static PyObject *__pyx_n_s__csc_matrix;
static PyObject *__pyx_n_s__csr_matrix;
static PyObject *__pyx_n_s__data;
static PyObject *__pyx_n_s__double;
static PyObject *__pyx_n_s__dtype;
static PyObject *__pyx_n_s__empty;
static PyObject *__pyx_n_s__eval;
static PyObject *__pyx_n_s__exc_info;
static PyObject *__pyx_n_s__exec;
static PyObject *__pyx_n_s__flat;
static PyObject *__pyx_n_s__format_exception;
static PyObject *__pyx_n_s__get;
static PyObject *__pyx_n_s__get_A;
static PyObject *__pyx_n_s__get_A_cplx;
static PyObject *__pyx_n_s__get_IA;
static PyObject *__pyx_n_s__get_JA;
static PyObject *__pyx_n_s__get_nnz;
static PyObject *__pyx_n_s__get_row_col_data;
static PyObject *__pyx_n_s__get_size;
static PyObject *__pyx_n_s__global_namespace;
static PyObject *__pyx_n_s__int32;
static PyObject *__pyx_n_s__is_complex;
static PyObject *__pyx_n_s__join;
static PyObject *__pyx_n_s__m;
static PyObject *__pyx_n_s__n;
static PyObject *__pyx_n_s__nd;
static PyObject *__pyx_n_s__numpy;
static PyObject *__pyx_n_s__property;
static PyObject *__pyx_n_s__row_col_data;
static PyObject *__pyx_n_s__shape;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_n_s__strides;
static PyObject *__pyx_n_s__sys;
static PyObject *__pyx_n_s__thisptr;
static PyObject *__pyx_n_s__to_scipy_coo;
static PyObject *__pyx_n_s__to_scipy_csc;
static PyObject *__pyx_n_s__to_scipy_csr;
static PyObject *__pyx_n_s__traceback;
static PyObject *__pyx_n_s__triplets_len;
static PyObject *__pyx_n_s__triplets_len_cplx;
static PyObject *__pyx_n_s__update;
static PyObject *__pyx_n_s__v;
static PyObject *__pyx_n_s__verbose;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_80;
static PyObject *__pyx_k_1;

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":6
 * # Email: hermes1d@googlegroups.com, home page: http://hpfem.org/
 * 
 * cdef inline object cp2str(const_char_p p):             # <<<<<<<<<<<<<<
 *     if p == NULL: return None
 *     else:         return p
 */

static CYTHON_INLINE PyObject *__pyx_f_14_hermes_common_cp2str(const char* __pyx_v_p) {
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("cp2str");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":7
 * 
 * cdef inline object cp2str(const_char_p p):
 *     if p == NULL: return None             # <<<<<<<<<<<<<<
 *     else:         return p
 * 
 */
  __pyx_t_1 = (__pyx_v_p == NULL);
  if (__pyx_t_1) {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":8
 * cdef inline object cp2str(const_char_p p):
 *     if p == NULL: return None
 *     else:         return p             # <<<<<<<<<<<<<<
 * 
 * cdef inline char_p str2cp(object s) except ? NULL:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyBytes_FromString(__pyx_v_p); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_2));
    __pyx_r = ((PyObject *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.cp2str");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":10
 *     else:         return p
 * 
 * cdef inline char_p str2cp(object s) except ? NULL:             # <<<<<<<<<<<<<<
 *     if s is None: return NULL
 *     else:         return s
 */

static CYTHON_INLINE char* __pyx_f_14_hermes_common_str2cp(PyObject *__pyx_v_s) {
  char* __pyx_r;
  int __pyx_t_1;
  char* __pyx_t_2;
  __Pyx_RefNannySetupContext("str2cp");
  __Pyx_INCREF(__pyx_v_s);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":11
 * 
 * cdef inline char_p str2cp(object s) except ? NULL:
 *     if s is None: return NULL             # <<<<<<<<<<<<<<
 *     else:         return s
 * 
 */
  __pyx_t_1 = (__pyx_v_s == Py_None);
  if (__pyx_t_1) {
    __pyx_r = NULL;
    goto __pyx_L0;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":12
 * cdef inline char_p str2cp(object s) except ? NULL:
 *     if s is None: return NULL
 *     else:         return s             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = PyBytes_AsString(__pyx_v_s); if (unlikely((__pyx_t_2 == (char*)NULL) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_r = __pyx_t_2;
    goto __pyx_L0;
  }
  __pyx_L3:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_hermes_common.str2cp");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":21
 *     cdef c_Matrix *thisptr
 * 
 *     def get_size(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.get_size()
 * 
 */

static PyObject *__pyx_pf_14_hermes_common_6Matrix_get_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_6Matrix_get_size(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("get_size");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":22
 * 
 *     def get_size(self):
 *         return self.thisptr.get_size()             # <<<<<<<<<<<<<<
 * 
 *     def add(self, int m, int n, double v):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_v_self)->thisptr->get_size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.Matrix.get_size");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":24
 *         return self.thisptr.get_size()
 * 
 *     def add(self, int m, int n, double v):             # <<<<<<<<<<<<<<
 *         self.thisptr.add(m, n, v)
 * 
 */

static PyObject *__pyx_pf_14_hermes_common_6Matrix_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_6Matrix_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_m;
  int __pyx_v_n;
  double __pyx_v_v;
  PyObject *__pyx_r = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__m,&__pyx_n_s__n,&__pyx_n_s__v,0};
  __Pyx_RefNannySetupContext("add");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__m);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__v);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_m = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_m = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = __pyx_PyFloat_AsDouble(PyTuple_GET_ITEM(__pyx_args, 2)); if (unlikely((__pyx_v_v == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_hermes_common.Matrix.add");
  return NULL;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":25
 * 
 *     def add(self, int m, int n, double v):
 *         self.thisptr.add(m, n, v)             # <<<<<<<<<<<<<<
 * 
 * cdef class SparseMatrix(Matrix):
 */
  ((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_v_self)->thisptr->add(__pyx_v_m, __pyx_v_n, __pyx_v_v);

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":32
 * cdef class CooMatrix(SparseMatrix):
 * 
 *     def __init__(self, size=0, is_complex=False):             # <<<<<<<<<<<<<<
 *         self.thisptr = <c_Matrix *>new_CooMatrix(size, is_complex)
 * 
 */

static int __pyx_pf_14_hermes_common_9CooMatrix___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_14_hermes_common_9CooMatrix___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_size = 0;
  PyObject *__pyx_v_is_complex = 0;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__size,&__pyx_n_s__is_complex,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = __pyx_k_1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__size);
        if (unlikely(value)) { values[0] = value; kw_args--; }
      }
      case  1:
      if (kw_args > 1) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__is_complex);
        if (unlikely(value)) { values[1] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_size = values[0];
    __pyx_v_is_complex = values[1];
  } else {
    __pyx_v_size = ((PyObject *)__pyx_int_0);
    __pyx_v_is_complex = __pyx_k_1;
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  2: __pyx_v_is_complex = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: __pyx_v_size = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_hermes_common.CooMatrix.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":33
 * 
 *     def __init__(self, size=0, is_complex=False):
 *         self.thisptr = <c_Matrix *>new_CooMatrix(size, is_complex)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, int m, int n, v):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_size); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_AsInt(__pyx_v_is_complex); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CooMatrix(__pyx_t_1, __pyx_t_2));

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_hermes_common.CooMatrix.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":35
 *         self.thisptr = <c_Matrix *>new_CooMatrix(size, is_complex)
 * 
 *     def add(self, int m, int n, v):             # <<<<<<<<<<<<<<
 *         if self.thisptr.is_complex():
 *             self.thisptr.add_cplx(m, n, v)
 */

static PyObject *__pyx_pf_14_hermes_common_9CooMatrix_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_9CooMatrix_add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_m;
  int __pyx_v_n;
  PyObject *__pyx_v_v = 0;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  __pyx_t_double_complex __pyx_t_2;
  double __pyx_t_3;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__m,&__pyx_n_s__n,&__pyx_n_s__v,0};
  __Pyx_RefNannySetupContext("add");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[3] = {0,0,0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__m);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
      case  1:
      values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__n);
      if (likely(values[1])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      case  2:
      values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__v);
      if (likely(values[2])) kw_args--;
      else {
        __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, 2); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "add") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_m = __Pyx_PyInt_AsInt(values[0]); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsInt(values[1]); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = values[2];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_m = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_m == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_n = __Pyx_PyInt_AsInt(PyTuple_GET_ITEM(__pyx_args, 1)); if (unlikely((__pyx_v_n == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_v = PyTuple_GET_ITEM(__pyx_args, 2);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_hermes_common.CooMatrix.add");
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_v);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":36
 * 
 *     def add(self, int m, int n, v):
 *         if self.thisptr.is_complex():             # <<<<<<<<<<<<<<
 *             self.thisptr.add_cplx(m, n, v)
 *         else:
 */
  __pyx_t_1 = ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->is_complex();
  if (__pyx_t_1) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":37
 *     def add(self, int m, int n, v):
 *         if self.thisptr.is_complex():
 *             self.thisptr.add_cplx(m, n, v)             # <<<<<<<<<<<<<<
 *         else:
 *             self.thisptr.add(m, n, v)
 */
    __pyx_t_2 = __Pyx_PyComplex_As___pyx_t_double_complex(__pyx_v_v); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->add(__pyx_v_m, __pyx_v_n, __pyx_t_2);
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":39
 *             self.thisptr.add_cplx(m, n, v)
 *         else:
 *             self.thisptr.add(m, n, v)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_v_v); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->add(__pyx_v_m, __pyx_v_n, __pyx_t_3);
  }
  __pyx_L6:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_hermes_common.CooMatrix.add");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":42
 * 
 *     @property
 *     def row_col_data(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CooMatrix_row_col_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CooMatrix_row_col_data[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CooMatrix_row_col_data(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_empty;
  struct CooMatrix *__pyx_v__thisptr;
  int __pyx_v_n;
  int __pyx_v_len;
  int *__pyx_v_crow;
  int *__pyx_v_ccol;
  double *__pyx_v_cdata;
  __pyx_t_double_complex *__pyx_v_ccdata;
  PyObject *__pyx_v_row;
  PyObject *__pyx_v_col;
  PyObject *__pyx_v_data;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("row_col_data");
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __pyx_v_empty = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_row = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_col = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_data = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":46
 *         Returns (row, col, data) arrays.
 *         """
 *         from numpy import empty             # <<<<<<<<<<<<<<
 *         cdef c_CooMatrix *_thisptr = <c_CooMatrix*>(self.thisptr)
 *         cdef int n, len
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__empty));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__empty));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__empty));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_empty);
  __pyx_v_empty = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":47
 *         """
 *         from numpy import empty
 *         cdef c_CooMatrix *_thisptr = <c_CooMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         cdef int n, len
 *         cdef int *crow, *ccol
 */
  __pyx_v__thisptr = ((struct CooMatrix *)((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":52
 *         cdef double *cdata
 *         cdef cplx *ccdata
 *         if self.thisptr.is_complex():             # <<<<<<<<<<<<<<
 *             len = _thisptr.triplets_len_cplx()
 *         else:
 */
  __pyx_t_3 = ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->is_complex();
  if (__pyx_t_3) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":53
 *         cdef cplx *ccdata
 *         if self.thisptr.is_complex():
 *             len = _thisptr.triplets_len_cplx()             # <<<<<<<<<<<<<<
 *         else:
 *             len = _thisptr.triplets_len()
 */
    __pyx_v_len = __pyx_v__thisptr->triplets_len_cplx();
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":55
 *             len = _thisptr.triplets_len_cplx()
 *         else:
 *             len = _thisptr.triplets_len()             # <<<<<<<<<<<<<<
 *         row = empty([len], dtype="int32")
 *         numpy2c_int_inplace(row, &crow, &n)
 */
    __pyx_v_len = __pyx_v__thisptr->triplets_len();
  }
  __pyx_L5:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":56
 *         else:
 *             len = _thisptr.triplets_len()
 *         row = empty([len], dtype="int32")             # <<<<<<<<<<<<<<
 *         numpy2c_int_inplace(row, &crow, &n)
 *         col = empty([len], dtype="int32")
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_len); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__int32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyEval_CallObjectWithKeywords(__pyx_v_empty, __pyx_t_2, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_row);
  __pyx_v_row = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":57
 *             len = _thisptr.triplets_len()
 *         row = empty([len], dtype="int32")
 *         numpy2c_int_inplace(row, &crow, &n)             # <<<<<<<<<<<<<<
 *         col = empty([len], dtype="int32")
 *         numpy2c_int_inplace(col, &ccol, &n)
 */
  numpy2c_int_inplace(__pyx_v_row, (&__pyx_v_crow), (&__pyx_v_n));

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":58
 *         row = empty([len], dtype="int32")
 *         numpy2c_int_inplace(row, &crow, &n)
 *         col = empty([len], dtype="int32")             # <<<<<<<<<<<<<<
 *         numpy2c_int_inplace(col, &ccol, &n)
 *         if self.thisptr.is_complex():
 */
  __pyx_t_4 = PyInt_FromLong(__pyx_v_len); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__int32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_v_empty, __pyx_t_4, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_v_col);
  __pyx_v_col = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":59
 *         numpy2c_int_inplace(row, &crow, &n)
 *         col = empty([len], dtype="int32")
 *         numpy2c_int_inplace(col, &ccol, &n)             # <<<<<<<<<<<<<<
 *         if self.thisptr.is_complex():
 *             data = empty([len], dtype="complex128")
 */
  numpy2c_int_inplace(__pyx_v_col, (&__pyx_v_ccol), (&__pyx_v_n));

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":60
 *         col = empty([len], dtype="int32")
 *         numpy2c_int_inplace(col, &ccol, &n)
 *         if self.thisptr.is_complex():             # <<<<<<<<<<<<<<
 *             data = empty([len], dtype="complex128")
 *             numpy2c_double_complex_inplace(data, &ccdata, &n)
 */
  __pyx_t_3 = ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->is_complex();
  if (__pyx_t_3) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":61
 *         numpy2c_int_inplace(col, &ccol, &n)
 *         if self.thisptr.is_complex():
 *             data = empty([len], dtype="complex128")             # <<<<<<<<<<<<<<
 *             numpy2c_double_complex_inplace(data, &ccdata, &n)
 *             _thisptr.get_row_col_data_cplx(crow, ccol, ccdata)
 */
    __pyx_t_2 = PyInt_FromLong(__pyx_v_len); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__complex128)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = PyEval_CallObjectWithKeywords(__pyx_v_empty, __pyx_t_2, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_data);
    __pyx_v_data = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":62
 *         if self.thisptr.is_complex():
 *             data = empty([len], dtype="complex128")
 *             numpy2c_double_complex_inplace(data, &ccdata, &n)             # <<<<<<<<<<<<<<
 *             _thisptr.get_row_col_data_cplx(crow, ccol, ccdata)
 *             return row, col, data
 */
    numpy2c_double_complex_inplace(__pyx_v_data, (&__pyx_v_ccdata), (&__pyx_v_n));

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":63
 *             data = empty([len], dtype="complex128")
 *             numpy2c_double_complex_inplace(data, &ccdata, &n)
 *             _thisptr.get_row_col_data_cplx(crow, ccol, ccdata)             # <<<<<<<<<<<<<<
 *             return row, col, data
 *         else:
 */
    __pyx_v__thisptr->get_row_col_data(__pyx_v_crow, __pyx_v_ccol, __pyx_v_ccdata);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":64
 *             numpy2c_double_complex_inplace(data, &ccdata, &n)
 *             _thisptr.get_row_col_data_cplx(crow, ccol, ccdata)
 *             return row, col, data             # <<<<<<<<<<<<<<
 *         else:
 *             data = empty([len], dtype="double")
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_row);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_row);
    __Pyx_GIVEREF(__pyx_v_row);
    __Pyx_INCREF(__pyx_v_col);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_col);
    __Pyx_GIVEREF(__pyx_v_col);
    __Pyx_INCREF(__pyx_v_data);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_data);
    __Pyx_GIVEREF(__pyx_v_data);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":66
 *             return row, col, data
 *         else:
 *             data = empty([len], dtype="double")             # <<<<<<<<<<<<<<
 *             numpy2c_double_inplace(data, &cdata, &n)
 *             _thisptr.get_row_col_data(crow, ccol, cdata)
 */
    __pyx_t_4 = PyInt_FromLong(__pyx_v_len); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_t_1));
    __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
    __pyx_t_1 = 0;
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_1));
    if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__double)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_v_empty, __pyx_t_4, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_data);
    __pyx_v_data = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":67
 *         else:
 *             data = empty([len], dtype="double")
 *             numpy2c_double_inplace(data, &cdata, &n)             # <<<<<<<<<<<<<<
 *             _thisptr.get_row_col_data(crow, ccol, cdata)
 *         return row, col, data
 */
    numpy2c_double_inplace(__pyx_v_data, (&__pyx_v_cdata), (&__pyx_v_n));

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":68
 *             data = empty([len], dtype="double")
 *             numpy2c_double_inplace(data, &cdata, &n)
 *             _thisptr.get_row_col_data(crow, ccol, cdata)             # <<<<<<<<<<<<<<
 *         return row, col, data
 * 
 */
    __pyx_v__thisptr->get_row_col_data(__pyx_v_crow, __pyx_v_ccol, __pyx_v_cdata);
  }
  __pyx_L6:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":69
 *             numpy2c_double_inplace(data, &cdata, &n)
 *             _thisptr.get_row_col_data(crow, ccol, cdata)
 *         return row, col, data             # <<<<<<<<<<<<<<
 * 
 *     def to_scipy_coo(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  __Pyx_INCREF(__pyx_v_col);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_col);
  __Pyx_GIVEREF(__pyx_v_col);
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_hermes_common.CooMatrix.row_col_data");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_empty);
  __Pyx_DECREF(__pyx_v_row);
  __Pyx_DECREF(__pyx_v_col);
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":71
 *         return row, col, data
 * 
 *     def to_scipy_coo(self):             # <<<<<<<<<<<<<<
 *         """
 *         Converts itself to the scipy sparse COO format.
 */

static PyObject *__pyx_pf_14_hermes_common_9CooMatrix_to_scipy_coo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CooMatrix_to_scipy_coo[] = "\n        Converts itself to the scipy sparse COO format.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CooMatrix_to_scipy_coo(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_coo_matrix;
  PyObject *__pyx_v_row;
  PyObject *__pyx_v_col;
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("to_scipy_coo");
  __pyx_v_coo_matrix = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_row = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_col = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_data = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":75
 *         Converts itself to the scipy sparse COO format.
 *         """
 *         from scipy.sparse import coo_matrix             # <<<<<<<<<<<<<<
 *         row, col, data = self.row_col_data
 *         n = self.get_size()
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__coo_matrix));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__coo_matrix));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__coo_matrix));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__coo_matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_coo_matrix);
  __pyx_v_coo_matrix = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":76
 *         """
 *         from scipy.sparse import coo_matrix
 *         row, col, data = self.row_col_data             # <<<<<<<<<<<<<<
 *         n = self.get_size()
 *         return coo_matrix((data, (row, col)), shape=(n, n))
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__row_col_data); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyTuple_CheckExact(__pyx_t_2) && likely(PyTuple_GET_SIZE(__pyx_t_2) == 3)) {
    PyObject* tuple = __pyx_t_2;
    __pyx_t_1 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_GET_ITEM(tuple, 2); __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_v_row);
    __pyx_v_row = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_col);
    __pyx_v_col = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_data);
    __pyx_v_data = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_5 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_UnpackItem(__pyx_t_5, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_UnpackItem(__pyx_t_5, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_UnpackItem(__pyx_t_5, 2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (__Pyx_EndUnpack(__pyx_t_5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_v_row);
    __pyx_v_row = __pyx_t_1;
    __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_v_col);
    __pyx_v_col = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_v_data);
    __pyx_v_data = __pyx_t_4;
    __pyx_t_4 = 0;
  }

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":77
 *         from scipy.sparse import coo_matrix
 *         row, col, data = self.row_col_data
 *         n = self.get_size()             # <<<<<<<<<<<<<<
 *         return coo_matrix((data, (row, col)), shape=(n, n))
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_n);
  __pyx_v_n = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":78
 *         row, col, data = self.row_col_data
 *         n = self.get_size()
 *         return coo_matrix((data, (row, col)), shape=(n, n))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_row);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_row);
  __Pyx_GIVEREF(__pyx_v_row);
  __Pyx_INCREF(__pyx_v_col);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_col);
  __Pyx_GIVEREF(__pyx_v_col);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_data);
  __Pyx_GIVEREF(__pyx_v_data);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__shape), __pyx_t_3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyEval_CallObjectWithKeywords(__pyx_v_coo_matrix, __pyx_t_4, ((PyObject *)__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_2)); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_hermes_common.CooMatrix.to_scipy_coo");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_coo_matrix);
  __Pyx_DECREF(__pyx_v_row);
  __Pyx_DECREF(__pyx_v_col);
  __Pyx_DECREF(__pyx_v_data);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":80
 *         return coo_matrix((data, (row, col)), shape=(n, n))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return str(self.to_scipy_coo())
 * 
 */

static PyObject *__pyx_pf_14_hermes_common_9CooMatrix___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_9CooMatrix___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":81
 * 
 *     def __str__(self):
 *         return str(self.to_scipy_coo())             # <<<<<<<<<<<<<<
 * 
 * cdef class CSRMatrix(SparseMatrix):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__to_scipy_coo); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CooMatrix.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":85
 * cdef class CSRMatrix(SparseMatrix):
 * 
 *     def __init__(self, M):             # <<<<<<<<<<<<<<
 *         if isinstance(M, (int, long)):
 *             size = M
 */

static int __pyx_pf_14_hermes_common_9CSRMatrix___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_14_hermes_common_9CSRMatrix___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_size;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__M,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__M);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_M = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_M = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_M);
  __pyx_v_size = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":86
 * 
 *     def __init__(self, M):
 *         if isinstance(M, (int, long)):             # <<<<<<<<<<<<<<
 *             size = M
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_size(size)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)&PyInt_Type)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)&PyInt_Type)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyInt_Type)));
  __Pyx_INCREF(((PyObject *)((PyObject*)&PyLong_Type)));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)((PyObject*)&PyLong_Type)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyLong_Type)));
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_M, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":87
 *     def __init__(self, M):
 *         if isinstance(M, (int, long)):
 *             size = M             # <<<<<<<<<<<<<<
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_size(size)
 *         elif isinstance(M, CooMatrix):
 */
    __Pyx_INCREF(__pyx_v_M);
    __Pyx_DECREF(__pyx_v_size);
    __pyx_v_size = __pyx_v_M;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":88
 *         if isinstance(M, (int, long)):
 *             size = M
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_size(size)             # <<<<<<<<<<<<<<
 *         elif isinstance(M, CooMatrix):
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_coo_matrix(
 */
    __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_size); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CSRMatrix(__pyx_t_3));
    goto __pyx_L6;
  }

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":89
 *             size = M
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_size(size)
 *         elif isinstance(M, CooMatrix):             # <<<<<<<<<<<<<<
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_coo_matrix(
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 */
  __pyx_t_2 = PyObject_TypeCheck(__pyx_v_M, ((PyTypeObject *)((PyObject*)__pyx_ptype_14_hermes_common_CooMatrix))); 
  if (__pyx_t_2) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":91
 *         elif isinstance(M, CooMatrix):
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_coo_matrix(
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(M, CSCMatrix):
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_csc_matrix(
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_14_hermes_common_py2c_Matrix(__pyx_v_M)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":90
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_size(size)
 *         elif isinstance(M, CooMatrix):
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_coo_matrix(             # <<<<<<<<<<<<<<
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 *         elif isinstance(M, CSCMatrix):
 */
    ((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CSRMatrix(((struct CooMatrix *)((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_t_1)->thisptr)));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L6;
  }

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":92
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_coo_matrix(
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 *         elif isinstance(M, CSCMatrix):             # <<<<<<<<<<<<<<
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_csc_matrix(
 *                     <c_CSCMatrix*>(py2c_Matrix(M).thisptr))
 */
  __pyx_t_2 = PyObject_TypeCheck(__pyx_v_M, ((PyTypeObject *)((PyObject*)__pyx_ptype_14_hermes_common_CSCMatrix))); 
  if (__pyx_t_2) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":94
 *         elif isinstance(M, CSCMatrix):
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_csc_matrix(
 *                     <c_CSCMatrix*>(py2c_Matrix(M).thisptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Not implemented.")
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_14_hermes_common_py2c_Matrix(__pyx_v_M)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":93
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 *         elif isinstance(M, CSCMatrix):
 *             self.thisptr = <c_Matrix *>new_CSRMatrix_csc_matrix(             # <<<<<<<<<<<<<<
 *                     <c_CSCMatrix*>(py2c_Matrix(M).thisptr))
 *         else:
 */
    ((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CSRMatrix(((struct CSCMatrix *)((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_t_1)->thisptr)));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":96
 *                     <c_CSCMatrix*>(py2c_Matrix(M).thisptr))
 *         else:
 *             raise Exception("Not implemented.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
    __pyx_t_4 = PyObject_Call(__pyx_builtin_Exception, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_size);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_M);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":99
 * 
 *     @property
 *     def IA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_IA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSRMatrix_IA[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_IA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct CSRMatrix *__pyx_v__thisptr;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("IA");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":103
 *         Returns (row, col, data) arrays.
 *         """
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         return c2numpy_int_inplace(_thisptr.get_IA(), self.get_size()+1)
 * 
 */
  __pyx_v__thisptr = ((struct CSRMatrix *)((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":104
 *         """
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)
 *         return c2numpy_int_inplace(_thisptr.get_IA(), self.get_size()+1)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = c2numpy_int_inplace(__pyx_v__thisptr->get_IA(), __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.IA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":107
 * 
 *     @property
 *     def JA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_JA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSRMatrix_JA[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_JA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct CSRMatrix *__pyx_v__thisptr;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("JA");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":111
 *         Returns (row, col, data) arrays.
 *         """
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         return c2numpy_int_inplace(_thisptr.get_JA(), _thisptr.get_nnz())
 * 
 */
  __pyx_v__thisptr = ((struct CSRMatrix *)((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":112
 *         """
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)
 *         return c2numpy_int_inplace(_thisptr.get_JA(), _thisptr.get_nnz())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = c2numpy_int_inplace(__pyx_v__thisptr->get_JA(), __pyx_v__thisptr->get_nnz()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.JA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":115
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSRMatrix_A[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct CSRMatrix *__pyx_v__thisptr;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("A");
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":119
 *         Returns (row, col, data) arrays.
 *         """
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         if self.thisptr.is_complex():
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),
 */
  __pyx_v__thisptr = ((struct CSRMatrix *)((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":120
 *         """
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)
 *         if self.thisptr.is_complex():             # <<<<<<<<<<<<<<
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),
 *                     _thisptr.get_nnz())
 */
  __pyx_t_1 = ((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->is_complex();
  if (__pyx_t_1) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":121
 *         cdef c_CSRMatrix *_thisptr = <c_CSRMatrix*>(self.thisptr)
 *         if self.thisptr.is_complex():
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),             # <<<<<<<<<<<<<<
 *                     _thisptr.get_nnz())
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":122
 *         if self.thisptr.is_complex():
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),
 *                     _thisptr.get_nnz())             # <<<<<<<<<<<<<<
 *         else:
 *             return c2numpy_double_inplace(_thisptr.get_A(), _thisptr.get_nnz())
 */
    __pyx_t_2 = c2numpy_double_complex_inplace(__pyx_v__thisptr->get_A_cplx(), __pyx_v__thisptr->get_nnz()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":124
 *                     _thisptr.get_nnz())
 *         else:
 *             return c2numpy_double_inplace(_thisptr.get_A(), _thisptr.get_nnz())             # <<<<<<<<<<<<<<
 * 
 *     def to_scipy_csr(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = c2numpy_double_inplace(__pyx_v__thisptr->get_A(), __pyx_v__thisptr->get_nnz()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.A");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":126
 *             return c2numpy_double_inplace(_thisptr.get_A(), _thisptr.get_nnz())
 * 
 *     def to_scipy_csr(self):             # <<<<<<<<<<<<<<
 *         """
 *         Converts itself to the scipy sparse CSR format.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_to_scipy_csr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSRMatrix_to_scipy_csr[] = "\n        Converts itself to the scipy sparse CSR format.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix_to_scipy_csr(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_csr_matrix;
  PyObject *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("to_scipy_csr");
  __pyx_v_csr_matrix = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":130
 *         Converts itself to the scipy sparse CSR format.
 *         """
 *         from scipy.sparse import csr_matrix             # <<<<<<<<<<<<<<
 *         n = self.get_size()
 *         return csr_matrix((self.A, self.JA, self.IA), shape=(n, n))
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__csr_matrix));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__csr_matrix));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__csr_matrix));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__csr_matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_csr_matrix);
  __pyx_v_csr_matrix = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":131
 *         """
 *         from scipy.sparse import csr_matrix
 *         n = self.get_size()             # <<<<<<<<<<<<<<
 *         return csr_matrix((self.A, self.JA, self.IA), shape=(n, n))
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_n);
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":132
 *         from scipy.sparse import csr_matrix
 *         n = self.get_size()
 *         return csr_matrix((self.A, self.JA, self.IA), shape=(n, n))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__JA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__IA); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__shape), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_v_csr_matrix, __pyx_t_3, ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.to_scipy_csr");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_csr_matrix);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":134
 *         return csr_matrix((self.A, self.JA, self.IA), shape=(n, n))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return str(self.to_scipy_csr())
 * 
 */

static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_9CSRMatrix___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":135
 * 
 *     def __str__(self):
 *         return str(self.to_scipy_csr())             # <<<<<<<<<<<<<<
 * 
 * cdef class CSCMatrix(SparseMatrix):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__to_scipy_csr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CSRMatrix.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":139
 * cdef class CSCMatrix(SparseMatrix):
 * 
 *     def __init__(self, M):             # <<<<<<<<<<<<<<
 *         if isinstance(M, (int, long)):
 *             size = M
 */

static int __pyx_pf_14_hermes_common_9CSCMatrix___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_14_hermes_common_9CSCMatrix___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_M = 0;
  PyObject *__pyx_v_size;
  int __pyx_r;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__M,0};
  __Pyx_RefNannySetupContext("__init__");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s__M);
      if (likely(values[0])) kw_args--;
      else goto __pyx_L5_argtuple_error;
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __pyx_v_M = values[0];
  } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
    goto __pyx_L5_argtuple_error;
  } else {
    __pyx_v_M = PyTuple_GET_ITEM(__pyx_args, 0);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.__init__");
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_INCREF(__pyx_v_M);
  __pyx_v_size = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":140
 * 
 *     def __init__(self, M):
 *         if isinstance(M, (int, long)):             # <<<<<<<<<<<<<<
 *             size = M
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_size(size)
 */
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((PyObject*)&PyInt_Type)));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)((PyObject*)&PyInt_Type)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyInt_Type)));
  __Pyx_INCREF(((PyObject *)((PyObject*)&PyLong_Type)));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)((PyObject*)&PyLong_Type)));
  __Pyx_GIVEREF(((PyObject *)((PyObject*)&PyLong_Type)));
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_M, __pyx_t_1); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":141
 *     def __init__(self, M):
 *         if isinstance(M, (int, long)):
 *             size = M             # <<<<<<<<<<<<<<
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_size(size)
 *         elif isinstance(M, CooMatrix):
 */
    __Pyx_INCREF(__pyx_v_M);
    __Pyx_DECREF(__pyx_v_size);
    __pyx_v_size = __pyx_v_M;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":142
 *         if isinstance(M, (int, long)):
 *             size = M
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_size(size)             # <<<<<<<<<<<<<<
 *         elif isinstance(M, CooMatrix):
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_coo_matrix(
 */
    __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_v_size); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    ((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CSCMatrix(__pyx_t_3));
    goto __pyx_L6;
  }

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":143
 *             size = M
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_size(size)
 *         elif isinstance(M, CooMatrix):             # <<<<<<<<<<<<<<
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_coo_matrix(
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 */
  __pyx_t_2 = PyObject_TypeCheck(__pyx_v_M, ((PyTypeObject *)((PyObject*)__pyx_ptype_14_hermes_common_CooMatrix))); 
  if (__pyx_t_2) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":145
 *         elif isinstance(M, CooMatrix):
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_coo_matrix(
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))             # <<<<<<<<<<<<<<
 *         elif isinstance(M, CSRMatrix):
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_csr_matrix(
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_14_hermes_common_py2c_Matrix(__pyx_v_M)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":144
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_size(size)
 *         elif isinstance(M, CooMatrix):
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_coo_matrix(             # <<<<<<<<<<<<<<
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 *         elif isinstance(M, CSRMatrix):
 */
    ((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CSCMatrix(((struct CooMatrix *)((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_t_1)->thisptr)));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L6;
  }

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":146
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_coo_matrix(
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 *         elif isinstance(M, CSRMatrix):             # <<<<<<<<<<<<<<
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_csr_matrix(
 *                     <c_CSRMatrix*>(py2c_Matrix(M).thisptr))
 */
  __pyx_t_2 = PyObject_TypeCheck(__pyx_v_M, ((PyTypeObject *)((PyObject*)__pyx_ptype_14_hermes_common_CSRMatrix))); 
  if (__pyx_t_2) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":148
 *         elif isinstance(M, CSRMatrix):
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_csr_matrix(
 *                     <c_CSRMatrix*>(py2c_Matrix(M).thisptr))             # <<<<<<<<<<<<<<
 *         else:
 *             raise Exception("Not implemented.")
 */
    __pyx_t_1 = ((PyObject *)__pyx_f_14_hermes_common_py2c_Matrix(__pyx_v_M)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":147
 *                     <c_CooMatrix*>(py2c_Matrix(M).thisptr))
 *         elif isinstance(M, CSRMatrix):
 *             self.thisptr = <c_Matrix *>new_CSCMatrix_csr_matrix(             # <<<<<<<<<<<<<<
 *                     <c_CSRMatrix*>(py2c_Matrix(M).thisptr))
 *         else:
 */
    ((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)new CSCMatrix(((struct CSRMatrix *)((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_t_1)->thisptr)));
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L6;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":150
 *                     <c_CSRMatrix*>(py2c_Matrix(M).thisptr))
 *         else:
 *             raise Exception("Not implemented.")             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_kp_s_4));
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_kp_s_4));
    __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_4));
    __pyx_t_4 = PyObject_Call(__pyx_builtin_Exception, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L6:;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.__init__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_size);
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_DECREF(__pyx_v_M);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":153
 * 
 *     @property
 *     def IA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_IA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSCMatrix_IA[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_IA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct CSCMatrix *__pyx_v__thisptr;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("IA");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":157
 *         Returns (row, col, data) arrays.
 *         """
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         return c2numpy_int_inplace(_thisptr.get_IA(), _thisptr.get_nnz())
 * 
 */
  __pyx_v__thisptr = ((struct CSCMatrix *)((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":158
 *         """
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)
 *         return c2numpy_int_inplace(_thisptr.get_IA(), _thisptr.get_nnz())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = c2numpy_int_inplace(__pyx_v__thisptr->get_IA(), __pyx_v__thisptr->get_nnz()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.IA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":161
 * 
 *     @property
 *     def JA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_JA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSCMatrix_JA[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_JA(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct CSCMatrix *__pyx_v__thisptr;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("JA");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":165
 *         Returns (row, col, data) arrays.
 *         """
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         return c2numpy_int_inplace(_thisptr.get_JA(), self.get_size()+1)
 * 
 */
  __pyx_v__thisptr = ((struct CSCMatrix *)((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":166
 *         """
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)
 *         return c2numpy_int_inplace(_thisptr.get_JA(), self.get_size()+1)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_size); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_int_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsInt(__pyx_t_1); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = c2numpy_int_inplace(__pyx_v__thisptr->get_JA(), __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.JA");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":169
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSCMatrix_A[] = "\n        Returns (row, col, data) arrays.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  struct CSCMatrix *__pyx_v__thisptr;
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("A");
  __Pyx_INCREF((PyObject *)__pyx_v_self);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":173
 *         Returns (row, col, data) arrays.
 *         """
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)             # <<<<<<<<<<<<<<
 *         if self.thisptr.is_complex():
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),
 */
  __pyx_v__thisptr = ((struct CSCMatrix *)((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":174
 *         """
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)
 *         if self.thisptr.is_complex():             # <<<<<<<<<<<<<<
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),
 *                     _thisptr.get_nnz())
 */
  __pyx_t_1 = ((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_v_self)->__pyx_base.__pyx_base.thisptr->is_complex();
  if (__pyx_t_1) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":175
 *         cdef c_CSCMatrix *_thisptr = <c_CSCMatrix*>(self.thisptr)
 *         if self.thisptr.is_complex():
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),             # <<<<<<<<<<<<<<
 *                     _thisptr.get_nnz())
 *         else:
 */
    __Pyx_XDECREF(__pyx_r);

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":176
 *         if self.thisptr.is_complex():
 *             return c2numpy_double_complex_inplace(_thisptr.get_A_cplx(),
 *                     _thisptr.get_nnz())             # <<<<<<<<<<<<<<
 *         else:
 *             return c2numpy_double_inplace(_thisptr.get_A(), _thisptr.get_nnz())
 */
    __pyx_t_2 = c2numpy_double_complex_inplace(__pyx_v__thisptr->get_A_cplx(), __pyx_v__thisptr->get_nnz()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
    goto __pyx_L5;
  }
  /*else*/ {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":178
 *                     _thisptr.get_nnz())
 *         else:
 *             return c2numpy_double_inplace(_thisptr.get_A(), _thisptr.get_nnz())             # <<<<<<<<<<<<<<
 * 
 *     def to_scipy_csc(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = c2numpy_double_inplace(__pyx_v__thisptr->get_A(), __pyx_v__thisptr->get_nnz()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  __pyx_L5:;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.A");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_self);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":180
 *             return c2numpy_double_inplace(_thisptr.get_A(), _thisptr.get_nnz())
 * 
 *     def to_scipy_csc(self):             # <<<<<<<<<<<<<<
 *         """
 *         Converts itself to the scipy sparse CSC format.
 */

static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_to_scipy_csc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_14_hermes_common_9CSCMatrix_to_scipy_csc[] = "\n        Converts itself to the scipy sparse CSC format.\n        ";
static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix_to_scipy_csc(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_v_csc_matrix;
  PyObject *__pyx_v_n;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("to_scipy_csc");
  __pyx_v_csc_matrix = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_n = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":184
 *         Converts itself to the scipy sparse CSC format.
 *         """
 *         from scipy.sparse import csc_matrix             # <<<<<<<<<<<<<<
 *         n = self.get_size()
 *         return csc_matrix((self.A, self.IA, self.JA), shape=(n, n))
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__csc_matrix));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__csc_matrix));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__csc_matrix));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s_3), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__csc_matrix); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_csc_matrix);
  __pyx_v_csc_matrix = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":185
 *         """
 *         from scipy.sparse import csc_matrix
 *         n = self.get_size()             # <<<<<<<<<<<<<<
 *         return csc_matrix((self.A, self.IA, self.JA), shape=(n, n))
 * 
 */
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__get_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_Call(__pyx_t_2, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_n);
  __pyx_v_n = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":186
 *         from scipy.sparse import csc_matrix
 *         n = self.get_size()
 *         return csc_matrix((self.A, self.IA, self.JA), shape=(n, n))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__IA); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__JA); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_4));
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  __Pyx_INCREF(__pyx_v_n);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_n);
  __Pyx_GIVEREF(__pyx_v_n);
  if (PyDict_SetItem(__pyx_t_4, ((PyObject *)__pyx_n_s__shape), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyEval_CallObjectWithKeywords(__pyx_v_csc_matrix, __pyx_t_3, ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.to_scipy_csc");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_csc_matrix);
  __Pyx_DECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":188
 *         return csc_matrix((self.A, self.IA, self.JA), shape=(n, n))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return str(self.to_scipy_csc())
 * 
 */

static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_9CSCMatrix___str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":189
 * 
 *     def __str__(self):
 *         return str(self.to_scipy_csc())             # <<<<<<<<<<<<<<
 * 
 * cdef Matrix py2c_Matrix(object M):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_self, __pyx_n_s__to_scipy_csc); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Call(__pyx_t_1, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.CSCMatrix.__str__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":191
 *         return str(self.to_scipy_csc())
 * 
 * cdef Matrix py2c_Matrix(object M):             # <<<<<<<<<<<<<<
 *     return M
 * 
 */

static  struct __pyx_obj_14_hermes_common_Matrix *__pyx_f_14_hermes_common_py2c_Matrix(PyObject *__pyx_v_M) {
  struct __pyx_obj_14_hermes_common_Matrix *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("py2c_Matrix");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":192
 * 
 * cdef Matrix py2c_Matrix(object M):
 *     return M             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2py_CooMatrix(c_CooMatrix *m):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  if (!(likely(((__pyx_v_M) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_M, __pyx_ptype_14_hermes_common_Matrix))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_M);
  __pyx_r = ((struct __pyx_obj_14_hermes_common_Matrix *)__pyx_v_M);
  goto __pyx_L0;

  __pyx_r = ((struct __pyx_obj_14_hermes_common_Matrix *)Py_None); __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("_hermes_common.py2c_Matrix");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":194
 *     return M
 * 
 * cdef api object c2py_CooMatrix(c_CooMatrix *m):             # <<<<<<<<<<<<<<
 *     cdef CooMatrix c
 *     c = <CooMatrix>PY_NEW(CooMatrix)
 */

static  PyObject *c2py_CooMatrix(struct CooMatrix *__pyx_v_m) {
  struct __pyx_obj_14_hermes_common_CooMatrix *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2py_CooMatrix");
  __pyx_v_c = ((struct __pyx_obj_14_hermes_common_CooMatrix *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":196
 * cdef api object c2py_CooMatrix(c_CooMatrix *m):
 *     cdef CooMatrix c
 *     c = <CooMatrix>PY_NEW(CooMatrix)             # <<<<<<<<<<<<<<
 *     c.thisptr = <c_Matrix *>m
 *     return c
 */
  __pyx_t_1 = PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_14_hermes_common_CooMatrix))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_t_1)));
  __Pyx_DECREF(((PyObject *)__pyx_v_c));
  __pyx_v_c = ((struct __pyx_obj_14_hermes_common_CooMatrix *)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":197
 *     cdef CooMatrix c
 *     c = <CooMatrix>PY_NEW(CooMatrix)
 *     c.thisptr = <c_Matrix *>m             # <<<<<<<<<<<<<<
 *     return c
 * 
 */
  __pyx_v_c->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)__pyx_v_m);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":198
 *     c = <CooMatrix>PY_NEW(CooMatrix)
 *     c.thisptr = <c_Matrix *>m
 *     return c             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2py_CSRMatrix(c_CSRMatrix *m):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2py_CooMatrix");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":200
 *     return c
 * 
 * cdef api object c2py_CSRMatrix(c_CSRMatrix *m):             # <<<<<<<<<<<<<<
 *     cdef CSRMatrix c
 *     c = <CSRMatrix>PY_NEW(CSRMatrix)
 */

static  PyObject *c2py_CSRMatrix(struct CSRMatrix *__pyx_v_m) {
  struct __pyx_obj_14_hermes_common_CSRMatrix *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2py_CSRMatrix");
  __pyx_v_c = ((struct __pyx_obj_14_hermes_common_CSRMatrix *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":202
 * cdef api object c2py_CSRMatrix(c_CSRMatrix *m):
 *     cdef CSRMatrix c
 *     c = <CSRMatrix>PY_NEW(CSRMatrix)             # <<<<<<<<<<<<<<
 *     c.thisptr = <c_Matrix *>m
 *     return c
 */
  __pyx_t_1 = PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_14_hermes_common_CSRMatrix))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_t_1)));
  __Pyx_DECREF(((PyObject *)__pyx_v_c));
  __pyx_v_c = ((struct __pyx_obj_14_hermes_common_CSRMatrix *)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":203
 *     cdef CSRMatrix c
 *     c = <CSRMatrix>PY_NEW(CSRMatrix)
 *     c.thisptr = <c_Matrix *>m             # <<<<<<<<<<<<<<
 *     return c
 * 
 */
  __pyx_v_c->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)__pyx_v_m);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":204
 *     c = <CSRMatrix>PY_NEW(CSRMatrix)
 *     c.thisptr = <c_Matrix *>m
 *     return c             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2py_CSCMatrix(c_CSCMatrix *m):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2py_CSRMatrix");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":206
 *     return c
 * 
 * cdef api object c2py_CSCMatrix(c_CSCMatrix *m):             # <<<<<<<<<<<<<<
 *     cdef CSCMatrix c
 *     c = <CSCMatrix>PY_NEW(CSCMatrix)
 */

static  PyObject *c2py_CSCMatrix(struct CSCMatrix *__pyx_v_m) {
  struct __pyx_obj_14_hermes_common_CSCMatrix *__pyx_v_c;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2py_CSCMatrix");
  __pyx_v_c = ((struct __pyx_obj_14_hermes_common_CSCMatrix *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":208
 * cdef api object c2py_CSCMatrix(c_CSCMatrix *m):
 *     cdef CSCMatrix c
 *     c = <CSCMatrix>PY_NEW(CSCMatrix)             # <<<<<<<<<<<<<<
 *     c.thisptr = <c_Matrix *>m
 *     return c
 */
  __pyx_t_1 = PY_NEW(((PyObject *)((PyObject*)__pyx_ptype_14_hermes_common_CSCMatrix))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_t_1)));
  __Pyx_DECREF(((PyObject *)__pyx_v_c));
  __pyx_v_c = ((struct __pyx_obj_14_hermes_common_CSCMatrix *)__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":209
 *     cdef CSCMatrix c
 *     c = <CSCMatrix>PY_NEW(CSCMatrix)
 *     c.thisptr = <c_Matrix *>m             # <<<<<<<<<<<<<<
 *     return c
 * 
 */
  __pyx_v_c->__pyx_base.__pyx_base.thisptr = ((struct Matrix *)__pyx_v_m);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":210
 *     c = <CSCMatrix>PY_NEW(CSCMatrix)
 *     c.thisptr = <c_Matrix *>m
 *     return c             # <<<<<<<<<<<<<<
 * 
 * #-----------------------------------------------------------------------
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2py_CSCMatrix");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":220
 * import_array()
 * 
 * cdef api object namespace_create():             # <<<<<<<<<<<<<<
 *     return {"verbose": False}
 * 
 */

static  PyObject *namespace_create(void) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("namespace_create");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":221
 * 
 * cdef api object namespace_create():
 *     return {"verbose": False}             # <<<<<<<<<<<<<<
 * 
 * cdef api void namespace_push(object namespace, const_char_p name, object o):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__verbose), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.namespace_create");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":223
 *     return {"verbose": False}
 * 
 * cdef api void namespace_push(object namespace, const_char_p name, object o):             # <<<<<<<<<<<<<<
 *     namespace.update({name: o})
 * 
 */

static  void namespace_push(PyObject *__pyx_v_namespace, const char* __pyx_v_name, PyObject *__pyx_v_o) {
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("namespace_push");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":224
 * 
 * cdef api void namespace_push(object namespace, const_char_p name, object o):
 *     namespace.update({name: o})             # <<<<<<<<<<<<<<
 * 
 * cdef api void namespace_print(object namespace):
 */
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_namespace, __pyx_n_s__update); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_3));
  if (PyDict_SetItem(__pyx_t_2, ((PyObject *)__pyx_t_3), __pyx_v_o) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_3)); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("_hermes_common.namespace_push");
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":226
 *     namespace.update({name: o})
 * 
 * cdef api void namespace_print(object namespace):             # <<<<<<<<<<<<<<
 *     print "-"*80
 *     print "namespace:"
 */

static  void namespace_print(PyObject *__pyx_v_namespace) {
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("namespace_print");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":227
 * 
 * cdef api void namespace_print(object namespace):
 *     print "-"*80             # <<<<<<<<<<<<<<
 *     print "namespace:"
 *     print namespace
 */
  __pyx_t_1 = PyNumber_Multiply(((PyObject *)__pyx_kp_s_5), __pyx_int_80); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":228
 * cdef api void namespace_print(object namespace):
 *     print "-"*80
 *     print "namespace:"             # <<<<<<<<<<<<<<
 *     print namespace
 * 
 */
  if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_6)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":229
 *     print "-"*80
 *     print "namespace:"
 *     print namespace             # <<<<<<<<<<<<<<
 * 
 * cdef api object namespace_pull(object namespace, const_char_p name):
 */
  if (__Pyx_PrintOne(0, __pyx_v_namespace) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_hermes_common.namespace_print");
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":231
 *     print namespace
 * 
 * cdef api object namespace_pull(object namespace, const_char_p name):             # <<<<<<<<<<<<<<
 *     return namespace.get(name)
 * 
 */

static  PyObject *namespace_pull(PyObject *__pyx_v_namespace, const char* __pyx_v_name) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("namespace_pull");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":232
 * 
 * cdef api object namespace_pull(object namespace, const_char_p name):
 *     return namespace.get(name)             # <<<<<<<<<<<<<<
 * 
 * global_namespace = namespace_create()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_GetAttr(__pyx_v_namespace, __pyx_n_s__get); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyBytes_FromString(__pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_2));
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
  __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_hermes_common.namespace_pull");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":236
 * global_namespace = namespace_create()
 * 
 * cdef api void cmd(const_char_p text):             # <<<<<<<<<<<<<<
 *     """
 *     Runs the command "text" in the Python namespace.
 */

static  void cmd(const char* __pyx_v_text) {
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("cmd");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":240
 *     Runs the command "text" in the Python namespace.
 *     """
 *     run_cmd(text, global_namespace)             # <<<<<<<<<<<<<<
 * 
 * cdef api void set_verbose_cmd(int verbose):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__global_namespace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  run_cmd(__pyx_v_text, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_hermes_common.cmd");
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":242
 *     run_cmd(text, global_namespace)
 * 
 * cdef api void set_verbose_cmd(int verbose):             # <<<<<<<<<<<<<<
 *     global_namespace["verbose"] = verbose
 * 
 */

static  void set_verbose_cmd(int __pyx_v_verbose) {
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("set_verbose_cmd");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":243
 * 
 * cdef api void set_verbose_cmd(int verbose):
 *     global_namespace["verbose"] = verbose             # <<<<<<<<<<<<<<
 * 
 * cdef api void insert_object(const_char_p name, object o):
 */
  __pyx_t_1 = PyInt_FromLong(__pyx_v_verbose); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetName(__pyx_m, __pyx_n_s__global_namespace); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyObject_SetItem(__pyx_t_2, ((PyObject *)__pyx_n_s__verbose), __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("_hermes_common.set_verbose_cmd");
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":245
 *     global_namespace["verbose"] = verbose
 * 
 * cdef api void insert_object(const_char_p name, object o):             # <<<<<<<<<<<<<<
 *     """
 *     Inserts an object into the global namespace.
 */

static  void insert_object(const char* __pyx_v_name, PyObject *__pyx_v_o) {
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("insert_object");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":272
 *     This prints "[ 1.  5.  3.]" (this is how the NumPy array is printed).
 *     """
 *     namespace_push(global_namespace, name, o)             # <<<<<<<<<<<<<<
 * 
 * cdef api object get_object(const_char_p name):
 */
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__global_namespace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  namespace_push(__pyx_t_1, __pyx_v_name, __pyx_v_o);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("_hermes_common.insert_object");
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":274
 *     namespace_push(global_namespace, name, o)
 * 
 * cdef api object get_object(const_char_p name):             # <<<<<<<<<<<<<<
 *     """
 *     Retrieves an object from the Python namespace.
 */

static  PyObject *get_object(const char* __pyx_v_name) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("get_object");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":289
 *     numpy2c_double_inplace(get_object("A"), &A, &n);
 *     """
 *     return namespace_pull(global_namespace, name)             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2py_int(int i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetName(__pyx_m, __pyx_n_s__global_namespace); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = namespace_pull(__pyx_t_1, __pyx_v_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("_hermes_common.get_object");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":291
 *     return namespace_pull(global_namespace, name)
 * 
 * cdef api object c2py_int(int i):             # <<<<<<<<<<<<<<
 *     return i
 * 
 */

static  PyObject *c2py_int(int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2py_int");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":292
 * 
 * cdef api object c2py_int(int i):
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef api int py2c_int(object i):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_i); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2py_int");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":294
 *     return i
 * 
 * cdef api int py2c_int(object i):             # <<<<<<<<<<<<<<
 *     return i
 * 
 */

static  int py2c_int(PyObject *__pyx_v_i) {
  int __pyx_r;
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("py2c_int");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":295
 * 
 * cdef api int py2c_int(object i):
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef api char* py2c_str(object s):
 */
  __pyx_t_1 = __Pyx_PyInt_AsInt(__pyx_v_i); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_hermes_common.py2c_int");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":297
 *     return i
 * 
 * cdef api char* py2c_str(object s):             # <<<<<<<<<<<<<<
 *     return s
 * 
 */

static  char *py2c_str(PyObject *__pyx_v_s) {
  char *__pyx_r;
  char *__pyx_t_1;
  __Pyx_RefNannySetupContext("py2c_str");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":298
 * 
 * cdef api char* py2c_str(object s):
 *     return s             # <<<<<<<<<<<<<<
 * 
 * cdef api double py2c_double(object i):
 */
  __pyx_t_1 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_hermes_common.py2c_str");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":300
 *     return s
 * 
 * cdef api double py2c_double(object i):             # <<<<<<<<<<<<<<
 *     return i
 * 
 */

static  double py2c_double(PyObject *__pyx_v_i) {
  double __pyx_r;
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("py2c_double");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":301
 * 
 * cdef api double py2c_double(object i):
 *     return i             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2numpy_int(int *A, int len):
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_i); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("_hermes_common.py2c_double");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":303
 *     return i
 * 
 * cdef api object c2numpy_int(int *A, int len):             # <<<<<<<<<<<<<<
 *     """
 *     Construct the integer NumPy array by copying the data.
 */

static  PyObject *c2numpy_int(int *__pyx_v_A, int __pyx_v_len) {
  PyObject *__pyx_v_empty;
  PyArrayObject *__pyx_v_vec = 0;
  int *__pyx_v_pvec;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("c2numpy_int");
  __pyx_v_empty = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":307
 *     Construct the integer NumPy array by copying the data.
 *     """
 *     from numpy import empty             # <<<<<<<<<<<<<<
 *     cdef ndarray vec = empty([len], dtype="int32")
 *     cdef int *pvec = <int *>vec.data
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__empty));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__empty));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__empty));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 307; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_empty);
  __pyx_v_empty = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":308
 *     """
 *     from numpy import empty
 *     cdef ndarray vec = empty([len], dtype="int32")             # <<<<<<<<<<<<<<
 *     cdef int *pvec = <int *>vec.data
 *     memcpy(pvec, A, len*sizeof(int))
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_len); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__int32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyEval_CallObjectWithKeywords(__pyx_v_empty, __pyx_t_2, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vec = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":309
 *     from numpy import empty
 *     cdef ndarray vec = empty([len], dtype="int32")
 *     cdef int *pvec = <int *>vec.data             # <<<<<<<<<<<<<<
 *     memcpy(pvec, A, len*sizeof(int))
 *     return vec
 */
  __pyx_v_pvec = ((int *)__pyx_v_vec->data);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":310
 *     cdef ndarray vec = empty([len], dtype="int32")
 *     cdef int *pvec = <int *>vec.data
 *     memcpy(pvec, A, len*sizeof(int))             # <<<<<<<<<<<<<<
 *     return vec
 * 
 */
  memcpy(__pyx_v_pvec, __pyx_v_A, (__pyx_v_len * (sizeof(int))));

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":311
 *     cdef int *pvec = <int *>vec.data
 *     memcpy(pvec, A, len*sizeof(int))
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2numpy_int_inplace(int *A, int len):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_hermes_common.c2numpy_int");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_empty);
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":313
 *     return vec
 * 
 * cdef api object c2numpy_int_inplace(int *A, int len):             # <<<<<<<<<<<<<<
 *     """
 *     Construct the integer NumPy array inplace (don't copy any data).
 */

static  PyObject *c2numpy_int_inplace(int *__pyx_v_A, int __pyx_v_len) {
  npy_intp __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2numpy_int_inplace");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":317
 *     Construct the integer NumPy array inplace (don't copy any data).
 *     """
 *     cdef npy_intp dim = len             # <<<<<<<<<<<<<<
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_INT, A)
 * 
 */
  __pyx_v_dim = __pyx_v_len;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":318
 *     """
 *     cdef npy_intp dim = len
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_INT, A)             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2numpy_double(double *A, int len):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dim), NPY_INT, __pyx_v_A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2numpy_int_inplace");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":320
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_INT, A)
 * 
 * cdef api object c2numpy_double(double *A, int len):             # <<<<<<<<<<<<<<
 *     """
 *     Construct the double NumPy array by copying the data.
 */

static  PyObject *c2numpy_double(double *__pyx_v_A, int __pyx_v_len) {
  PyObject *__pyx_v_empty;
  PyArrayObject *__pyx_v_vec = 0;
  double *__pyx_v_pvec;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("c2numpy_double");
  __pyx_v_empty = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":324
 *     Construct the double NumPy array by copying the data.
 *     """
 *     from numpy import empty             # <<<<<<<<<<<<<<
 *     cdef ndarray vec = empty([len], dtype="double")
 *     cdef double *pvec = <double *>vec.data
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_INCREF(((PyObject *)__pyx_n_s__empty));
  PyList_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_n_s__empty));
  __Pyx_GIVEREF(((PyObject *)__pyx_n_s__empty));
  __pyx_t_2 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__empty); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_v_empty);
  __pyx_v_empty = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":325
 *     """
 *     from numpy import empty
 *     cdef ndarray vec = empty([len], dtype="double")             # <<<<<<<<<<<<<<
 *     cdef double *pvec = <double *>vec.data
 *     memcpy(pvec, A, len*sizeof(double))
 */
  __pyx_t_2 = PyInt_FromLong(__pyx_v_len); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__double)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = PyEval_CallObjectWithKeywords(__pyx_v_empty, __pyx_t_2, ((PyObject *)__pyx_t_1)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vec = ((PyArrayObject *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":326
 *     from numpy import empty
 *     cdef ndarray vec = empty([len], dtype="double")
 *     cdef double *pvec = <double *>vec.data             # <<<<<<<<<<<<<<
 *     memcpy(pvec, A, len*sizeof(double))
 *     return vec
 */
  __pyx_v_pvec = ((double *)__pyx_v_vec->data);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":327
 *     cdef ndarray vec = empty([len], dtype="double")
 *     cdef double *pvec = <double *>vec.data
 *     memcpy(pvec, A, len*sizeof(double))             # <<<<<<<<<<<<<<
 *     return vec
 * 
 */
  memcpy(__pyx_v_pvec, __pyx_v_A, (__pyx_v_len * (sizeof(double))));

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":328
 *     cdef double *pvec = <double *>vec.data
 *     memcpy(pvec, A, len*sizeof(double))
 *     return vec             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2numpy_double_inplace(double *A, int len):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_vec));
  __pyx_r = ((PyObject *)__pyx_v_vec);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("_hermes_common.c2numpy_double");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_empty);
  __Pyx_XDECREF((PyObject *)__pyx_v_vec);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":330
 *     return vec
 * 
 * cdef api object c2numpy_double_inplace(double *A, int len):             # <<<<<<<<<<<<<<
 *     """
 *     Construct the double NumPy array inplace (don't copy any data).
 */

static  PyObject *c2numpy_double_inplace(double *__pyx_v_A, int __pyx_v_len) {
  npy_intp __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2numpy_double_inplace");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":334
 *     Construct the double NumPy array inplace (don't copy any data).
 *     """
 *     cdef npy_intp dim = len             # <<<<<<<<<<<<<<
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_DOUBLE, A)
 * 
 */
  __pyx_v_dim = __pyx_v_len;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":335
 *     """
 *     cdef npy_intp dim = len
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_DOUBLE, A)             # <<<<<<<<<<<<<<
 * 
 * cdef api object c2numpy_double_complex_inplace(cplx *A, int len):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dim), NPY_DOUBLE, __pyx_v_A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2numpy_double_inplace");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":337
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_DOUBLE, A)
 * 
 * cdef api object c2numpy_double_complex_inplace(cplx *A, int len):             # <<<<<<<<<<<<<<
 *     """
 *     Construct the double NumPy array inplace (don't copy any data).
 */

static  PyObject *c2numpy_double_complex_inplace(__pyx_t_double_complex *__pyx_v_A, int __pyx_v_len) {
  npy_intp __pyx_v_dim;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("c2numpy_double_complex_inplace");

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":341
 *     Construct the double NumPy array inplace (don't copy any data).
 *     """
 *     cdef npy_intp dim = len             # <<<<<<<<<<<<<<
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_COMPLEX128, A)
 * 
 */
  __pyx_v_dim = __pyx_v_len;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":342
 *     """
 *     cdef npy_intp dim = len
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_COMPLEX128, A)             # <<<<<<<<<<<<<<
 * 
 * _AA = None
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dim), NPY_COMPLEX128, __pyx_v_A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("_hermes_common.c2numpy_double_complex_inplace");
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":346
 * _AA = None
 * 
 * cdef api void numpy2c_int_inplace(object A_n, int **A_c, int *n):             # <<<<<<<<<<<<<<
 *     """
 *     Returns the C array, that points to the numpy array (inplace).
 */

static  void numpy2c_int_inplace(PyObject *__pyx_v_A_n, int **__pyx_v_A_c, int *__pyx_v_n) {
  PyArrayObject *__pyx_v_A = 0;
  PyObject *__pyx_v_array;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("numpy2c_int_inplace");
  __Pyx_INCREF(__pyx_v_A_n);
  __pyx_v_array = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":356
 *     if the _AA global variable was deallocated.
 *     """
 *     cdef ndarray A = A_n             # <<<<<<<<<<<<<<
 *     if not (A.nd == 1 and A.strides[0] == sizeof(int)):
 *         from numpy import array
 */
  if (!(likely(((__pyx_v_A_n) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_A_n, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 356; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_A_n);
  __pyx_v_A = ((PyArrayObject *)__pyx_v_A_n);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":357
 *     """
 *     cdef ndarray A = A_n
 *     if not (A.nd == 1 and A.strides[0] == sizeof(int)):             # <<<<<<<<<<<<<<
 *         from numpy import array
 *         A = array(A.flat, dtype="int32")
 */
  __pyx_t_1 = (__pyx_v_A->nd == 1);
  if (__pyx_t_1) {
    __pyx_t_2 = ((__pyx_v_A->strides[0]) == (sizeof(int)));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_t_1 = (!__pyx_t_3);
  if (__pyx_t_1) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":358
 *     cdef ndarray A = A_n
 *     if not (A.nd == 1 and A.strides[0] == sizeof(int)):
 *         from numpy import array             # <<<<<<<<<<<<<<
 *         A = array(A.flat, dtype="int32")
 *         # this is needed so that numpy doesn't dealocate the arrays
 */
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__array));
    PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_n_s__array));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__array));
    __pyx_t_5 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_array);
    __pyx_v_array = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":359
 *     if not (A.nd == 1 and A.strides[0] == sizeof(int)):
 *         from numpy import array
 *         A = array(A.flat, dtype="int32")             # <<<<<<<<<<<<<<
 *         # this is needed so that numpy doesn't dealocate the arrays
 *         global _AA
 */
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_A), __pyx_n_s__flat); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    if (PyDict_SetItem(__pyx_t_5, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__int32)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_v_array, __pyx_t_4, ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_A));
    __pyx_v_A = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":362
 *         # this is needed so that numpy doesn't dealocate the arrays
 *         global _AA
 *         _AA = A             # <<<<<<<<<<<<<<
 *     n[0] = len(A)
 *     A_c[0] = <int *>(A.data)
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___AA, ((PyObject *)__pyx_v_A)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":363
 *         global _AA
 *         _AA = A
 *     n[0] = len(A)             # <<<<<<<<<<<<<<
 *     A_c[0] = <int *>(A.data)
 * 
 */
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_A)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  (__pyx_v_n[0]) = __pyx_t_7;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":364
 *         _AA = A
 *     n[0] = len(A)
 *     A_c[0] = <int *>(A.data)             # <<<<<<<<<<<<<<
 * 
 * cdef api void numpy2c_double_inplace(object A_n, double **A_c, int *n):
 */
  (__pyx_v_A_c[0]) = ((int *)__pyx_v_A->data);

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("_hermes_common.numpy2c_int_inplace");
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_A);
  __Pyx_DECREF(__pyx_v_array);
  __Pyx_DECREF(__pyx_v_A_n);
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":366
 *     A_c[0] = <int *>(A.data)
 * 
 * cdef api void numpy2c_double_inplace(object A_n, double **A_c, int *n):             # <<<<<<<<<<<<<<
 *     """
 *     Returns the C array, that points to the numpy array (inplace).
 */

static  void numpy2c_double_inplace(PyObject *__pyx_v_A_n, double **__pyx_v_A_c, int *__pyx_v_n) {
  PyArrayObject *__pyx_v_A = 0;
  PyObject *__pyx_v_array;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("numpy2c_double_inplace");
  __Pyx_INCREF(__pyx_v_A_n);
  __pyx_v_array = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":376
 *     if the _AA global variable was deallocated.
 *     """
 *     cdef ndarray A = A_n             # <<<<<<<<<<<<<<
 *     if not (A.nd == 1 and A.strides[0] == sizeof(double)):
 *         from numpy import array
 */
  if (!(likely(((__pyx_v_A_n) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_A_n, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_A_n);
  __pyx_v_A = ((PyArrayObject *)__pyx_v_A_n);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":377
 *     """
 *     cdef ndarray A = A_n
 *     if not (A.nd == 1 and A.strides[0] == sizeof(double)):             # <<<<<<<<<<<<<<
 *         from numpy import array
 *         A = array(A.flat, dtype="double")
 */
  __pyx_t_1 = (__pyx_v_A->nd == 1);
  if (__pyx_t_1) {
    __pyx_t_2 = ((__pyx_v_A->strides[0]) == (sizeof(double)));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_t_1 = (!__pyx_t_3);
  if (__pyx_t_1) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":378
 *     cdef ndarray A = A_n
 *     if not (A.nd == 1 and A.strides[0] == sizeof(double)):
 *         from numpy import array             # <<<<<<<<<<<<<<
 *         A = array(A.flat, dtype="double")
 *         # this is needed so that numpy doesn't dealocate the arrays
 */
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__array));
    PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_n_s__array));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__array));
    __pyx_t_5 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_array);
    __pyx_v_array = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":379
 *     if not (A.nd == 1 and A.strides[0] == sizeof(double)):
 *         from numpy import array
 *         A = array(A.flat, dtype="double")             # <<<<<<<<<<<<<<
 *         # this is needed so that numpy doesn't dealocate the arrays
 *         global _AA
 */
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_A), __pyx_n_s__flat); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    if (PyDict_SetItem(__pyx_t_5, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__double)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_v_array, __pyx_t_4, ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_A));
    __pyx_v_A = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":382
 *         # this is needed so that numpy doesn't dealocate the arrays
 *         global _AA
 *         _AA = A             # <<<<<<<<<<<<<<
 *     n[0] = len(A)
 *     A_c[0] = <double *>(A.data)
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___AA, ((PyObject *)__pyx_v_A)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":383
 *         global _AA
 *         _AA = A
 *     n[0] = len(A)             # <<<<<<<<<<<<<<
 *     A_c[0] = <double *>(A.data)
 * 
 */
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_A)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  (__pyx_v_n[0]) = __pyx_t_7;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":384
 *         _AA = A
 *     n[0] = len(A)
 *     A_c[0] = <double *>(A.data)             # <<<<<<<<<<<<<<
 * 
 * cdef api void numpy2c_double_complex_inplace(object A_n, cplx **A_c, int *n):
 */
  (__pyx_v_A_c[0]) = ((double *)__pyx_v_A->data);

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("_hermes_common.numpy2c_double_inplace");
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_A);
  __Pyx_DECREF(__pyx_v_array);
  __Pyx_DECREF(__pyx_v_A_n);
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":386
 *     A_c[0] = <double *>(A.data)
 * 
 * cdef api void numpy2c_double_complex_inplace(object A_n, cplx **A_c, int *n):             # <<<<<<<<<<<<<<
 *     """
 *     Returns the C array, that points to the numpy array (inplace).
 */

static  void numpy2c_double_complex_inplace(PyObject *__pyx_v_A_n, __pyx_t_double_complex **__pyx_v_A_c, int *__pyx_v_n) {
  PyArrayObject *__pyx_v_A = 0;
  PyObject *__pyx_v_array;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  __Pyx_RefNannySetupContext("numpy2c_double_complex_inplace");
  __Pyx_INCREF(__pyx_v_A_n);
  __pyx_v_array = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":396
 *     if the _AA global variable was deallocated.
 *     """
 *     cdef ndarray A = A_n             # <<<<<<<<<<<<<<
 *     if not (A.nd == 1 and A.strides[0] == sizeof(cplx)):
 *         from numpy import array
 */
  if (!(likely(((__pyx_v_A_n) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_A_n, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 396; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_INCREF(__pyx_v_A_n);
  __pyx_v_A = ((PyArrayObject *)__pyx_v_A_n);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":397
 *     """
 *     cdef ndarray A = A_n
 *     if not (A.nd == 1 and A.strides[0] == sizeof(cplx)):             # <<<<<<<<<<<<<<
 *         from numpy import array
 *         A = array(A.flat, dtype="complex128")
 */
  __pyx_t_1 = (__pyx_v_A->nd == 1);
  if (__pyx_t_1) {
    __pyx_t_2 = ((__pyx_v_A->strides[0]) == (sizeof(__pyx_t_double_complex)));
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_t_1 = (!__pyx_t_3);
  if (__pyx_t_1) {

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":398
 *     cdef ndarray A = A_n
 *     if not (A.nd == 1 and A.strides[0] == sizeof(cplx)):
 *         from numpy import array             # <<<<<<<<<<<<<<
 *         A = array(A.flat, dtype="complex128")
 *         # this is needed so that numpy doesn't dealocate the arrays
 */
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_4));
    __Pyx_INCREF(((PyObject *)__pyx_n_s__array));
    PyList_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_n_s__array));
    __Pyx_GIVEREF(((PyObject *)__pyx_n_s__array));
    __pyx_t_5 = __Pyx_Import(((PyObject *)__pyx_n_s__numpy), ((PyObject *)__pyx_t_4)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(((PyObject *)__pyx_t_4)); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetAttr(__pyx_t_5, __pyx_n_s__array); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_v_array);
    __pyx_v_array = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":399
 *     if not (A.nd == 1 and A.strides[0] == sizeof(cplx)):
 *         from numpy import array
 *         A = array(A.flat, dtype="complex128")             # <<<<<<<<<<<<<<
 *         # this is needed so that numpy doesn't dealocate the arrays
 *         global _AA
 */
    __pyx_t_5 = PyObject_GetAttr(((PyObject *)__pyx_v_A), __pyx_n_s__flat); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(((PyObject *)__pyx_t_5));
    if (PyDict_SetItem(__pyx_t_5, ((PyObject *)__pyx_n_s__dtype), ((PyObject *)__pyx_n_s__complex128)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_6 = PyEval_CallObjectWithKeywords(__pyx_v_array, __pyx_t_4, ((PyObject *)__pyx_t_5)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(((PyObject *)__pyx_t_5)); __pyx_t_5 = 0;
    if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_14_hermes_common_ndarray))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 399; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(((PyObject *)__pyx_v_A));
    __pyx_v_A = ((PyArrayObject *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":402
 *         # this is needed so that numpy doesn't dealocate the arrays
 *         global _AA
 *         _AA = A             # <<<<<<<<<<<<<<
 *     n[0] = len(A)
 *     A_c[0] = <cplx *>(A.data)
 */
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s___AA, ((PyObject *)__pyx_v_A)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":403
 *         global _AA
 *         _AA = A
 *     n[0] = len(A)             # <<<<<<<<<<<<<<
 *     A_c[0] = <cplx *>(A.data)
 * 
 */
  __pyx_t_7 = PyObject_Length(((PyObject *)__pyx_v_A)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  (__pyx_v_n[0]) = __pyx_t_7;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":404
 *         _AA = A
 *     n[0] = len(A)
 *     A_c[0] = <cplx *>(A.data)             # <<<<<<<<<<<<<<
 * 
 * cdef api void run_cmd(const_char_p text, object namespace):
 */
  (__pyx_v_A_c[0]) = ((__pyx_t_double_complex *)__pyx_v_A->data);

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_WriteUnraisable("_hermes_common.numpy2c_double_complex_inplace");
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_A);
  __Pyx_DECREF(__pyx_v_array);
  __Pyx_DECREF(__pyx_v_A_n);
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":406
 *     A_c[0] = <cplx *>(A.data)
 * 
 * cdef api void run_cmd(const_char_p text, object namespace):             # <<<<<<<<<<<<<<
 *     try:
 *         verbose = namespace.get("verbose")
 */

static  void run_cmd(const char* __pyx_v_text, PyObject *__pyx_v_namespace) {
  PyObject *__pyx_v_verbose;
  PyObject *__pyx_v_code;
  PyObject *__pyx_v_e;
  PyObject *__pyx_v_exit_code;
  PyObject *__pyx_v_etype;
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_tb;
  PyObject *__pyx_v_s;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  char *__pyx_t_11;
  __Pyx_RefNannySetupContext("run_cmd");
  __Pyx_INCREF(__pyx_v_namespace);
  __pyx_v_verbose = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_code = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_e = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_exit_code = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_etype = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_value = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_tb = Py_None; __Pyx_INCREF(Py_None);
  __pyx_v_s = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":407
 * 
 * cdef api void run_cmd(const_char_p text, object namespace):
 *     try:             # <<<<<<<<<<<<<<
 *         verbose = namespace.get("verbose")
 *         if verbose:
 */
  {
    PyObject *__pyx_save_exc_type, *__pyx_save_exc_value, *__pyx_save_exc_tb;
    __Pyx_ExceptionSave(&__pyx_save_exc_type, &__pyx_save_exc_value, &__pyx_save_exc_tb);
    __Pyx_XGOTREF(__pyx_save_exc_type);
    __Pyx_XGOTREF(__pyx_save_exc_value);
    __Pyx_XGOTREF(__pyx_save_exc_tb);
    /*try:*/ {

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":408
 * cdef api void run_cmd(const_char_p text, object namespace):
 *     try:
 *         verbose = namespace.get("verbose")             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print "got a text:", text
 */
      __pyx_t_1 = PyObject_GetAttr(__pyx_v_namespace, __pyx_n_s__get); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_n_s__verbose));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_n_s__verbose));
      __Pyx_GIVEREF(((PyObject *)__pyx_n_s__verbose));
      __pyx_t_3 = PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 408; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_v_verbose);
      __pyx_v_verbose = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":409
 *     try:
 *         verbose = namespace.get("verbose")
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print "got a text:", text
 *         if verbose:
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 409; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      if (__pyx_t_4) {

        /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":410
 *         verbose = namespace.get("verbose")
 *         if verbose:
 *             print "got a text:", text             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print "evaluting in the namespace:"
 */
        __pyx_t_3 = PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(((PyObject *)__pyx_t_3));
        __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(((PyObject *)__pyx_kp_s_7));
        PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_kp_s_7));
        __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_7));
        PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_t_3));
        __Pyx_GIVEREF(((PyObject *)__pyx_t_3));
        __pyx_t_3 = 0;
        if (__Pyx_Print(0, __pyx_t_2, 1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 410; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L11;
      }
      __pyx_L11:;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":411
 *         if verbose:
 *             print "got a text:", text
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print "evaluting in the namespace:"
 *             print namespace
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 411; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      if (__pyx_t_4) {

        /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":412
 *             print "got a text:", text
 *         if verbose:
 *             print "evaluting in the namespace:"             # <<<<<<<<<<<<<<
 *             print namespace
 *         code = compile(text, "", "exec")
 */
        if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_8)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

        /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":413
 *         if verbose:
 *             print "evaluting in the namespace:"
 *             print namespace             # <<<<<<<<<<<<<<
 *         code = compile(text, "", "exec")
 *         eval(code, {}, namespace)
 */
        if (__Pyx_PrintOne(0, __pyx_v_namespace) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        goto __pyx_L12;
      }
      __pyx_L12:;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":414
 *             print "evaluting in the namespace:"
 *             print namespace
 *         code = compile(text, "", "exec")             # <<<<<<<<<<<<<<
 *         eval(code, {}, namespace)
 *         if verbose:
 */
      __pyx_t_2 = PyBytes_FromString(__pyx_v_text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(((PyObject *)__pyx_kp_s_9));
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_kp_s_9));
      __Pyx_GIVEREF(((PyObject *)__pyx_kp_s_9));
      __Pyx_INCREF(((PyObject *)__pyx_n_s__exec));
      PyTuple_SET_ITEM(__pyx_t_3, 2, ((PyObject *)__pyx_n_s__exec));
      __Pyx_GIVEREF(((PyObject *)__pyx_n_s__exec));
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_builtin_compile, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_v_code);
      __pyx_v_code = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":415
 *             print namespace
 *         code = compile(text, "", "exec")
 *         eval(code, {}, namespace)             # <<<<<<<<<<<<<<
 *         if verbose:
 *             print "new namespace:"
 */
      __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(((PyObject *)__pyx_t_2));
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_code);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_code);
      __Pyx_GIVEREF(__pyx_v_code);
      PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_t_2));
      __Pyx_GIVEREF(((PyObject *)__pyx_t_2));
      __Pyx_INCREF(__pyx_v_namespace);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_namespace);
      __Pyx_GIVEREF(__pyx_v_namespace);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_Call(__pyx_builtin_eval, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":416
 *         code = compile(text, "", "exec")
 *         eval(code, {}, namespace)
 *         if verbose:             # <<<<<<<<<<<<<<
 *             print "new namespace:"
 *             print namespace
 */
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_verbose); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      if (__pyx_t_4) {

        /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":417
 *         eval(code, {}, namespace)
 *         if verbose:
 *             print "new namespace:"             # <<<<<<<<<<<<<<
 *             print namespace
 *     except SystemExit, e:
 */
        if (__Pyx_PrintOne(0, ((PyObject *)__pyx_kp_s_10)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

        /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":418
 *         if verbose:
 *             print "new namespace:"
 *             print namespace             # <<<<<<<<<<<<<<
 *     except SystemExit, e:
 *         try:
 */
        if (__Pyx_PrintOne(0, __pyx_v_namespace) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        goto __pyx_L13;
      }
      __pyx_L13:;
    }
    __Pyx_XDECREF(__pyx_save_exc_type); __pyx_save_exc_type = 0;
    __Pyx_XDECREF(__pyx_save_exc_value); __pyx_save_exc_value = 0;
    __Pyx_XDECREF(__pyx_save_exc_tb); __pyx_save_exc_tb = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":419
 *             print "new namespace:"
 *             print namespace
 *     except SystemExit, e:             # <<<<<<<<<<<<<<
 *         try:
 *             exit_code = int(e)
 */
    __pyx_t_5 = PyErr_ExceptionMatches(__pyx_builtin_SystemExit);
    if (__pyx_t_5) {
      __Pyx_AddTraceback("_hermes_common.run_cmd");
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_3, &__pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_v_e);
      __pyx_v_e = __pyx_t_3;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":420
 *             print namespace
 *     except SystemExit, e:
 *         try:             # <<<<<<<<<<<<<<
 *             exit_code = int(e)
 *         except:
 */
      {
        PyObject *__pyx_save_exc_type, *__pyx_save_exc_value, *__pyx_save_exc_tb;
        __Pyx_ExceptionSave(&__pyx_save_exc_type, &__pyx_save_exc_value, &__pyx_save_exc_tb);
        __Pyx_XGOTREF(__pyx_save_exc_type);
        __Pyx_XGOTREF(__pyx_save_exc_value);
        __Pyx_XGOTREF(__pyx_save_exc_tb);
        /*try:*/ {

          /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":421
 *     except SystemExit, e:
 *         try:
 *             exit_code = int(e)             # <<<<<<<<<<<<<<
 *         except:
 *             exit_code = -1
 */
          __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L16_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_INCREF(__pyx_v_e);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_e);
          __Pyx_GIVEREF(__pyx_v_e);
          __pyx_t_7 = PyObject_Call(((PyObject *)((PyObject*)&PyInt_Type)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L16_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_v_exit_code);
          __pyx_v_exit_code = __pyx_t_7;
          __pyx_t_7 = 0;
        }
        __Pyx_XDECREF(__pyx_save_exc_type); __pyx_save_exc_type = 0;
        __Pyx_XDECREF(__pyx_save_exc_value); __pyx_save_exc_value = 0;
        __Pyx_XDECREF(__pyx_save_exc_tb); __pyx_save_exc_tb = 0;
        goto __pyx_L23_try_end;
        __pyx_L16_error:;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":422
 *         try:
 *             exit_code = int(e)
 *         except:             # <<<<<<<<<<<<<<
 *             exit_code = -1
 *         exit(exit_code)
 */
        /*except:*/ {
          __Pyx_AddTraceback("_hermes_common.run_cmd");
          if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_6, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L18_except_error;}
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_GOTREF(__pyx_t_8);

          /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":423
 *             exit_code = int(e)
 *         except:
 *             exit_code = -1             # <<<<<<<<<<<<<<
 *         exit(exit_code)
 *     except:
 */
          __Pyx_INCREF(__pyx_int_neg_1);
          __Pyx_DECREF(__pyx_v_exit_code);
          __pyx_v_exit_code = __pyx_int_neg_1;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          goto __pyx_L17_exception_handled;
        }
        __pyx_L18_except_error:;
        __Pyx_XGIVEREF(__pyx_save_exc_type);
        __Pyx_XGIVEREF(__pyx_save_exc_value);
        __Pyx_XGIVEREF(__pyx_save_exc_tb);
        __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
        goto __pyx_L5_except_error;
        __pyx_L17_exception_handled:;
        __Pyx_XGIVEREF(__pyx_save_exc_type);
        __Pyx_XGIVEREF(__pyx_save_exc_value);
        __Pyx_XGIVEREF(__pyx_save_exc_tb);
        __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
        __pyx_L23_try_end:;
      }

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":424
 *         except:
 *             exit_code = -1
 *         exit(exit_code)             # <<<<<<<<<<<<<<
 *     except:
 *         etype, value, tb = sys.exc_info()
 */
      __pyx_t_5 = __Pyx_PyInt_AsInt(__pyx_v_exit_code); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      exit(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L4_exception_handled;
    }

    /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":425
 *             exit_code = -1
 *         exit(exit_code)
 *     except:             # <<<<<<<<<<<<<<
 *         etype, value, tb = sys.exc_info()
 *         s = "".join(traceback.format_exception(etype, value, tb))
 */
    /*except:*/ {
      __Pyx_AddTraceback("_hermes_common.run_cmd");
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_3, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_2);

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":426
 *         exit(exit_code)
 *     except:
 *         etype, value, tb = sys.exc_info()             # <<<<<<<<<<<<<<
 *         s = "".join(traceback.format_exception(etype, value, tb))
 *         s = "Exception raised in the Python code:\n" + s
 */
      __pyx_t_8 = __Pyx_GetName(__pyx_m, __pyx_n_s__sys); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = PyObject_GetAttr(__pyx_t_8, __pyx_n_s__exc_info); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_Call(__pyx_t_6, ((PyObject *)__pyx_empty_tuple), NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (PyTuple_CheckExact(__pyx_t_8) && likely(PyTuple_GET_SIZE(__pyx_t_8) == 3)) {
        PyObject* tuple = __pyx_t_8;
        __pyx_t_6 = PyTuple_GET_ITEM(tuple, 0); __Pyx_INCREF(__pyx_t_6);
        __pyx_t_7 = PyTuple_GET_ITEM(tuple, 1); __Pyx_INCREF(__pyx_t_7);
        __pyx_t_9 = PyTuple_GET_ITEM(tuple, 2); __Pyx_INCREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_v_etype);
        __pyx_v_etype = __pyx_t_6;
        __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_v_value);
        __pyx_v_value = __pyx_t_7;
        __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_v_tb);
        __pyx_v_tb = __pyx_t_9;
        __pyx_t_9 = 0;
      } else {
        __pyx_t_10 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_6 = __Pyx_UnpackItem(__pyx_t_10, 0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = __Pyx_UnpackItem(__pyx_t_10, 1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_9 = __Pyx_UnpackItem(__pyx_t_10, 2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        if (__Pyx_EndUnpack(__pyx_t_10) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 426; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_v_etype);
        __pyx_v_etype = __pyx_t_6;
        __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_v_value);
        __pyx_v_value = __pyx_t_7;
        __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_v_tb);
        __pyx_v_tb = __pyx_t_9;
        __pyx_t_9 = 0;
      }

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":427
 *     except:
 *         etype, value, tb = sys.exc_info()
 *         s = "".join(traceback.format_exception(etype, value, tb))             # <<<<<<<<<<<<<<
 *         s = "Exception raised in the Python code:\n" + s
 *         throw_exception(s)
 */
      __pyx_t_8 = PyObject_GetAttr(((PyObject *)__pyx_kp_s_9), __pyx_n_s__join); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_GetName(__pyx_m, __pyx_n_s__traceback); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = PyObject_GetAttr(__pyx_t_9, __pyx_n_s__format_exception); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_INCREF(__pyx_v_etype);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_v_etype);
      __Pyx_GIVEREF(__pyx_v_etype);
      __Pyx_INCREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      __Pyx_INCREF(__pyx_v_tb);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_v_tb);
      __Pyx_GIVEREF(__pyx_v_tb);
      __pyx_t_6 = PyObject_Call(__pyx_t_7, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 427; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_v_s);
      __pyx_v_s = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":428
 *         etype, value, tb = sys.exc_info()
 *         s = "".join(traceback.format_exception(etype, value, tb))
 *         s = "Exception raised in the Python code:\n" + s             # <<<<<<<<<<<<<<
 *         throw_exception(s)
 * 
 */
      __pyx_t_6 = PyNumber_Add(((PyObject *)__pyx_kp_s_11), __pyx_v_s); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 428; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_v_s);
      __pyx_v_s = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":429
 *         s = "".join(traceback.format_exception(etype, value, tb))
 *         s = "Exception raised in the Python code:\n" + s
 *         throw_exception(s)             # <<<<<<<<<<<<<<
 * 
 * def init_hermes2d_wrappers():
 */
      __pyx_t_11 = PyBytes_AsString(__pyx_v_s); if (unlikely((!__pyx_t_11) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      throw_exception(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_save_exc_type);
    __Pyx_XGIVEREF(__pyx_save_exc_value);
    __Pyx_XGIVEREF(__pyx_save_exc_tb);
    __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_save_exc_type);
    __Pyx_XGIVEREF(__pyx_save_exc_value);
    __Pyx_XGIVEREF(__pyx_save_exc_tb);
    __Pyx_ExceptionReset(__pyx_save_exc_type, __pyx_save_exc_value, __pyx_save_exc_tb);
    __pyx_L10_try_end:;
  }

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("_hermes_common.run_cmd");
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_verbose);
  __Pyx_DECREF(__pyx_v_code);
  __Pyx_DECREF(__pyx_v_e);
  __Pyx_DECREF(__pyx_v_exit_code);
  __Pyx_DECREF(__pyx_v_etype);
  __Pyx_DECREF(__pyx_v_value);
  __Pyx_DECREF(__pyx_v_tb);
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_DECREF(__pyx_v_namespace);
  __Pyx_RefNannyFinishContext();
}

/* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":431
 *         throw_exception(s)
 * 
 * def init_hermes2d_wrappers():             # <<<<<<<<<<<<<<
 *     init_global_empty_tuple()
 * 
 */

static PyObject *__pyx_pf_14_hermes_common_init_hermes2d_wrappers(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pf_14_hermes_common_init_hermes2d_wrappers(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("init_hermes2d_wrappers");
  __pyx_self = __pyx_self;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":432
 * 
 * def init_hermes2d_wrappers():
 *     init_global_empty_tuple()             # <<<<<<<<<<<<<<
 * 
 * init_global_empty_tuple()
 */
  init_global_empty_tuple();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_14_hermes_common_Matrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  return o;
}

static void __pyx_tp_dealloc_14_hermes_common_Matrix(PyObject *o) {
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_14_hermes_common_Matrix[] = {
  {__Pyx_NAMESTR("get_size"), (PyCFunction)__pyx_pf_14_hermes_common_6Matrix_get_size, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("add"), (PyCFunction)__pyx_pf_14_hermes_common_6Matrix_add, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_Matrix = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_Matrix = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Matrix = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_Matrix = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_14_hermes_common_Matrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_hermes_common.Matrix"), /*tp_name*/
  sizeof(struct __pyx_obj_14_hermes_common_Matrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14_hermes_common_Matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*tp_compare*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_Matrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_Matrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Matrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_Matrix, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14_hermes_common_Matrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14_hermes_common_Matrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_14_hermes_common_SparseMatrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14_hermes_common_Matrix(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_14_hermes_common_SparseMatrix[] = {
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_SparseMatrix = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_SparseMatrix = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_SparseMatrix = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_SparseMatrix = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_14_hermes_common_SparseMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_hermes_common.SparseMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_14_hermes_common_SparseMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14_hermes_common_Matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*tp_compare*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_SparseMatrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_SparseMatrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_SparseMatrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_SparseMatrix, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14_hermes_common_SparseMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14_hermes_common_SparseMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_14_hermes_common_CooMatrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14_hermes_common_Matrix(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_14_hermes_common_CooMatrix[] = {
  {__Pyx_NAMESTR("add"), (PyCFunction)__pyx_pf_14_hermes_common_9CooMatrix_add, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("row_col_data"), (PyCFunction)__pyx_pf_14_hermes_common_9CooMatrix_row_col_data, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CooMatrix_row_col_data)},
  {__Pyx_NAMESTR("to_scipy_coo"), (PyCFunction)__pyx_pf_14_hermes_common_9CooMatrix_to_scipy_coo, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CooMatrix_to_scipy_coo)},
  {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_14_hermes_common_9CooMatrix___str__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CooMatrix = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CooMatrix = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CooMatrix = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CooMatrix = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_14_hermes_common_CooMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_hermes_common.CooMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_14_hermes_common_CooMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14_hermes_common_Matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*tp_compare*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CooMatrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_CooMatrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CooMatrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_14_hermes_common_9CooMatrix___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CooMatrix, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14_hermes_common_CooMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_14_hermes_common_9CooMatrix___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14_hermes_common_CooMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_14_hermes_common_CSRMatrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14_hermes_common_Matrix(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_14_hermes_common_CSRMatrix[] = {
  {__Pyx_NAMESTR("IA"), (PyCFunction)__pyx_pf_14_hermes_common_9CSRMatrix_IA, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSRMatrix_IA)},
  {__Pyx_NAMESTR("JA"), (PyCFunction)__pyx_pf_14_hermes_common_9CSRMatrix_JA, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSRMatrix_JA)},
  {__Pyx_NAMESTR("A"), (PyCFunction)__pyx_pf_14_hermes_common_9CSRMatrix_A, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSRMatrix_A)},
  {__Pyx_NAMESTR("to_scipy_csr"), (PyCFunction)__pyx_pf_14_hermes_common_9CSRMatrix_to_scipy_csr, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSRMatrix_to_scipy_csr)},
  {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_14_hermes_common_9CSRMatrix___str__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CSRMatrix = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CSRMatrix = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CSRMatrix = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CSRMatrix = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_14_hermes_common_CSRMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_hermes_common.CSRMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_14_hermes_common_CSRMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14_hermes_common_Matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*tp_compare*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CSRMatrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_CSRMatrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CSRMatrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_14_hermes_common_9CSRMatrix___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CSRMatrix, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14_hermes_common_CSRMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_14_hermes_common_9CSRMatrix___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14_hermes_common_CSRMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyObject *__pyx_tp_new_14_hermes_common_CSCMatrix(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_14_hermes_common_Matrix(t, a, k);
  if (!o) return 0;
  return o;
}

static PyMethodDef __pyx_methods_14_hermes_common_CSCMatrix[] = {
  {__Pyx_NAMESTR("IA"), (PyCFunction)__pyx_pf_14_hermes_common_9CSCMatrix_IA, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSCMatrix_IA)},
  {__Pyx_NAMESTR("JA"), (PyCFunction)__pyx_pf_14_hermes_common_9CSCMatrix_JA, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSCMatrix_JA)},
  {__Pyx_NAMESTR("A"), (PyCFunction)__pyx_pf_14_hermes_common_9CSCMatrix_A, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSCMatrix_A)},
  {__Pyx_NAMESTR("to_scipy_csc"), (PyCFunction)__pyx_pf_14_hermes_common_9CSCMatrix_to_scipy_csc, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_14_hermes_common_9CSCMatrix_to_scipy_csc)},
  {__Pyx_NAMESTR("__str__"), (PyCFunction)__pyx_pf_14_hermes_common_9CSCMatrix___str__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_CSCMatrix = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*nb_long*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if (PY_MAJOR_VERSION >= 3) || (Py_TPFLAGS_DEFAULT & Py_TPFLAGS_HAVE_INDEX)
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_CSCMatrix = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_CSCMatrix = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_CSCMatrix = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_14_hermes_common_CSCMatrix = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("_hermes_common.CSCMatrix"), /*tp_name*/
  sizeof(struct __pyx_obj_14_hermes_common_CSCMatrix), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_14_hermes_common_Matrix, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION >= 3
  0, /*reserved*/
  #else
  0, /*tp_compare*/
  #endif
  0, /*tp_repr*/
  &__pyx_tp_as_number_CSCMatrix, /*tp_as_number*/
  &__pyx_tp_as_sequence_CSCMatrix, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_CSCMatrix, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pf_14_hermes_common_9CSCMatrix___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_CSCMatrix, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_14_hermes_common_CSCMatrix, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pf_14_hermes_common_9CSCMatrix___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_14_hermes_common_CSCMatrix, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("init_hermes2d_wrappers"), (PyCFunction)__pyx_pf_14_hermes_common_init_hermes2d_wrappers, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static void __pyx_init_filenames(void); /*proto*/

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("_hermes_common"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 0, 1, 0},
  {&__pyx_kp_s_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 0, 1, 0},
  {&__pyx_kp_u_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0, 0},
  {&__pyx_kp_u_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0, 0},
  {&__pyx_kp_u_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0, 0},
  {&__pyx_kp_u_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0, 0},
  {&__pyx_kp_u_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 1, 0, 0},
  {&__pyx_kp_u_17, __pyx_k_17, sizeof(__pyx_k_17), 0, 1, 0, 0},
  {&__pyx_kp_u_18, __pyx_k_18, sizeof(__pyx_k_18), 0, 1, 0, 0},
  {&__pyx_kp_u_19, __pyx_k_19, sizeof(__pyx_k_19), 0, 1, 0, 0},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_kp_u_20, __pyx_k_20, sizeof(__pyx_k_20), 0, 1, 0, 0},
  {&__pyx_kp_u_21, __pyx_k_21, sizeof(__pyx_k_21), 0, 1, 0, 0},
  {&__pyx_n_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 1},
  {&__pyx_kp_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 0},
  {&__pyx_kp_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 0},
  {&__pyx_kp_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 0},
  {&__pyx_kp_s_7, __pyx_k_7, sizeof(__pyx_k_7), 0, 0, 1, 0},
  {&__pyx_kp_s_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 0, 1, 0},
  {&__pyx_kp_s_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 0, 1, 0},
  {&__pyx_n_s__A, __pyx_k__A, sizeof(__pyx_k__A), 0, 0, 1, 1},
  {&__pyx_n_s__CSCMatrix, __pyx_k__CSCMatrix, sizeof(__pyx_k__CSCMatrix), 0, 0, 1, 1},
  {&__pyx_n_s__CSRMatrix, __pyx_k__CSRMatrix, sizeof(__pyx_k__CSRMatrix), 0, 0, 1, 1},
  {&__pyx_n_s__CooMatrix, __pyx_k__CooMatrix, sizeof(__pyx_k__CooMatrix), 0, 0, 1, 1},
  {&__pyx_n_s__Exception, __pyx_k__Exception, sizeof(__pyx_k__Exception), 0, 0, 1, 1},
  {&__pyx_n_s__IA, __pyx_k__IA, sizeof(__pyx_k__IA), 0, 0, 1, 1},
  {&__pyx_n_s__JA, __pyx_k__JA, sizeof(__pyx_k__JA), 0, 0, 1, 1},
  {&__pyx_n_s__M, __pyx_k__M, sizeof(__pyx_k__M), 0, 0, 1, 1},
  {&__pyx_n_s__SystemExit, __pyx_k__SystemExit, sizeof(__pyx_k__SystemExit), 0, 0, 1, 1},
  {&__pyx_n_s___AA, __pyx_k___AA, sizeof(__pyx_k___AA), 0, 0, 1, 1},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s__add, __pyx_k__add, sizeof(__pyx_k__add), 0, 0, 1, 1},
  {&__pyx_n_s__add_cplx, __pyx_k__add_cplx, sizeof(__pyx_k__add_cplx), 0, 0, 1, 1},
  {&__pyx_n_s__array, __pyx_k__array, sizeof(__pyx_k__array), 0, 0, 1, 1},
  {&__pyx_n_s__compile, __pyx_k__compile, sizeof(__pyx_k__compile), 0, 0, 1, 1},
  {&__pyx_n_s__complex128, __pyx_k__complex128, sizeof(__pyx_k__complex128), 0, 0, 1, 1},
  {&__pyx_n_s__coo_matrix, __pyx_k__coo_matrix, sizeof(__pyx_k__coo_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__csc_matrix, __pyx_k__csc_matrix, sizeof(__pyx_k__csc_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__csr_matrix, __pyx_k__csr_matrix, sizeof(__pyx_k__csr_matrix), 0, 0, 1, 1},
  {&__pyx_n_s__data, __pyx_k__data, sizeof(__pyx_k__data), 0, 0, 1, 1},
  {&__pyx_n_s__double, __pyx_k__double, sizeof(__pyx_k__double), 0, 0, 1, 1},
  {&__pyx_n_s__dtype, __pyx_k__dtype, sizeof(__pyx_k__dtype), 0, 0, 1, 1},
  {&__pyx_n_s__empty, __pyx_k__empty, sizeof(__pyx_k__empty), 0, 0, 1, 1},
  {&__pyx_n_s__eval, __pyx_k__eval, sizeof(__pyx_k__eval), 0, 0, 1, 1},
  {&__pyx_n_s__exc_info, __pyx_k__exc_info, sizeof(__pyx_k__exc_info), 0, 0, 1, 1},
  {&__pyx_n_s__exec, __pyx_k__exec, sizeof(__pyx_k__exec), 0, 0, 1, 1},
  {&__pyx_n_s__flat, __pyx_k__flat, sizeof(__pyx_k__flat), 0, 0, 1, 1},
  {&__pyx_n_s__format_exception, __pyx_k__format_exception, sizeof(__pyx_k__format_exception), 0, 0, 1, 1},
  {&__pyx_n_s__get, __pyx_k__get, sizeof(__pyx_k__get), 0, 0, 1, 1},
  {&__pyx_n_s__get_A, __pyx_k__get_A, sizeof(__pyx_k__get_A), 0, 0, 1, 1},
  {&__pyx_n_s__get_A_cplx, __pyx_k__get_A_cplx, sizeof(__pyx_k__get_A_cplx), 0, 0, 1, 1},
  {&__pyx_n_s__get_IA, __pyx_k__get_IA, sizeof(__pyx_k__get_IA), 0, 0, 1, 1},
  {&__pyx_n_s__get_JA, __pyx_k__get_JA, sizeof(__pyx_k__get_JA), 0, 0, 1, 1},
  {&__pyx_n_s__get_nnz, __pyx_k__get_nnz, sizeof(__pyx_k__get_nnz), 0, 0, 1, 1},
  {&__pyx_n_s__get_row_col_data, __pyx_k__get_row_col_data, sizeof(__pyx_k__get_row_col_data), 0, 0, 1, 1},
  {&__pyx_n_s__get_size, __pyx_k__get_size, sizeof(__pyx_k__get_size), 0, 0, 1, 1},
  {&__pyx_n_s__global_namespace, __pyx_k__global_namespace, sizeof(__pyx_k__global_namespace), 0, 0, 1, 1},
  {&__pyx_n_s__int32, __pyx_k__int32, sizeof(__pyx_k__int32), 0, 0, 1, 1},
  {&__pyx_n_s__is_complex, __pyx_k__is_complex, sizeof(__pyx_k__is_complex), 0, 0, 1, 1},
  {&__pyx_n_s__join, __pyx_k__join, sizeof(__pyx_k__join), 0, 0, 1, 1},
  {&__pyx_n_s__m, __pyx_k__m, sizeof(__pyx_k__m), 0, 0, 1, 1},
  {&__pyx_n_s__n, __pyx_k__n, sizeof(__pyx_k__n), 0, 0, 1, 1},
  {&__pyx_n_s__nd, __pyx_k__nd, sizeof(__pyx_k__nd), 0, 0, 1, 1},
  {&__pyx_n_s__numpy, __pyx_k__numpy, sizeof(__pyx_k__numpy), 0, 0, 1, 1},
  {&__pyx_n_s__property, __pyx_k__property, sizeof(__pyx_k__property), 0, 0, 1, 1},
  {&__pyx_n_s__row_col_data, __pyx_k__row_col_data, sizeof(__pyx_k__row_col_data), 0, 0, 1, 1},
  {&__pyx_n_s__shape, __pyx_k__shape, sizeof(__pyx_k__shape), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {&__pyx_n_s__strides, __pyx_k__strides, sizeof(__pyx_k__strides), 0, 0, 1, 1},
  {&__pyx_n_s__sys, __pyx_k__sys, sizeof(__pyx_k__sys), 0, 0, 1, 1},
  {&__pyx_n_s__thisptr, __pyx_k__thisptr, sizeof(__pyx_k__thisptr), 0, 0, 1, 1},
  {&__pyx_n_s__to_scipy_coo, __pyx_k__to_scipy_coo, sizeof(__pyx_k__to_scipy_coo), 0, 0, 1, 1},
  {&__pyx_n_s__to_scipy_csc, __pyx_k__to_scipy_csc, sizeof(__pyx_k__to_scipy_csc), 0, 0, 1, 1},
  {&__pyx_n_s__to_scipy_csr, __pyx_k__to_scipy_csr, sizeof(__pyx_k__to_scipy_csr), 0, 0, 1, 1},
  {&__pyx_n_s__traceback, __pyx_k__traceback, sizeof(__pyx_k__traceback), 0, 0, 1, 1},
  {&__pyx_n_s__triplets_len, __pyx_k__triplets_len, sizeof(__pyx_k__triplets_len), 0, 0, 1, 1},
  {&__pyx_n_s__triplets_len_cplx, __pyx_k__triplets_len_cplx, sizeof(__pyx_k__triplets_len_cplx), 0, 0, 1, 1},
  {&__pyx_n_s__update, __pyx_k__update, sizeof(__pyx_k__update), 0, 0, 1, 1},
  {&__pyx_n_s__v, __pyx_k__v, sizeof(__pyx_k__v), 0, 0, 1, 1},
  {&__pyx_n_s__verbose, __pyx_k__verbose, sizeof(__pyx_k__verbose), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_property = __Pyx_GetName(__pyx_b, __pyx_n_s__property); if (!__pyx_builtin_property) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Exception = __Pyx_GetName(__pyx_b, __pyx_n_s__Exception); if (!__pyx_builtin_Exception) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_compile = __Pyx_GetName(__pyx_b, __pyx_n_s__compile); if (!__pyx_builtin_compile) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_eval = __Pyx_GetName(__pyx_b, __pyx_n_s__eval); if (!__pyx_builtin_eval) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 415; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_SystemExit = __Pyx_GetName(__pyx_b, __pyx_n_s__SystemExit); if (!__pyx_builtin_SystemExit) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 419; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_80 = PyInt_FromLong(80); if (unlikely(!__pyx_int_80)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_hermes_common(void); /*proto*/
PyMODINIT_FUNC init_hermes_common(void)
#else
PyMODINIT_FUNC PyInit__hermes_common(void); /*proto*/
PyMODINIT_FUNC PyInit__hermes_common(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit__hermes_common(void)", __LINE__, __FILE__);
  #endif
  __pyx_init_filenames();
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("_hermes_common"), __pyx_methods, 0, 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main__hermes_common) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("c2numpy_int", (void (*)(void))c2numpy_int, "PyObject *(int *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2numpy_double", (void (*)(void))c2numpy_double, "PyObject *(double *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2py_CooMatrix", (void (*)(void))c2py_CooMatrix, "PyObject *(struct CooMatrix *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2py_CSRMatrix", (void (*)(void))c2py_CSRMatrix, "PyObject *(struct CSRMatrix *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2py_CSCMatrix", (void (*)(void))c2py_CSCMatrix, "PyObject *(struct CSCMatrix *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("namespace_create", (void (*)(void))namespace_create, "PyObject *(void)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("namespace_push", (void (*)(void))namespace_push, "void (PyObject *, const char*, PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("namespace_print", (void (*)(void))namespace_print, "void (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("namespace_pull", (void (*)(void))namespace_pull, "PyObject *(PyObject *, const char*)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("cmd", (void (*)(void))cmd, "void (const char*)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("set_verbose_cmd", (void (*)(void))set_verbose_cmd, "void (int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("insert_object", (void (*)(void))insert_object, "void (const char*, PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("get_object", (void (*)(void))get_object, "PyObject *(const char*)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2py_int", (void (*)(void))c2py_int, "PyObject *(int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py2c_int", (void (*)(void))py2c_int, "int (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py2c_str", (void (*)(void))py2c_str, "char *(PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("py2c_double", (void (*)(void))py2c_double, "double (PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2numpy_int_inplace", (void (*)(void))c2numpy_int_inplace, "PyObject *(int *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2numpy_double_inplace", (void (*)(void))c2numpy_double_inplace, "PyObject *(double *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("c2numpy_double_complex_inplace", (void (*)(void))c2numpy_double_complex_inplace, "PyObject *(__pyx_t_double_complex *, int)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("numpy2c_int_inplace", (void (*)(void))numpy2c_int_inplace, "void (PyObject *, int **, int *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("numpy2c_double_inplace", (void (*)(void))numpy2c_double_inplace, "void (PyObject *, double **, int *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("numpy2c_double_complex_inplace", (void (*)(void))numpy2c_double_complex_inplace, "void (PyObject *, __pyx_t_double_complex **, int *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("run_cmd", (void (*)(void))run_cmd, "void (const char*, PyObject *)") < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_ptype_14_hermes_common_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_14_hermes_common_ndarray)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyType_Ready(&__pyx_type_14_hermes_common_Matrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "Matrix", (PyObject *)&__pyx_type_14_hermes_common_Matrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_14_hermes_common_Matrix = &__pyx_type_14_hermes_common_Matrix;
  __pyx_type_14_hermes_common_SparseMatrix.tp_base = __pyx_ptype_14_hermes_common_Matrix;
  if (PyType_Ready(&__pyx_type_14_hermes_common_SparseMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "SparseMatrix", (PyObject *)&__pyx_type_14_hermes_common_SparseMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_14_hermes_common_SparseMatrix = &__pyx_type_14_hermes_common_SparseMatrix;
  __pyx_type_14_hermes_common_CooMatrix.tp_base = __pyx_ptype_14_hermes_common_SparseMatrix;
  if (PyType_Ready(&__pyx_type_14_hermes_common_CooMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CooMatrix", (PyObject *)&__pyx_type_14_hermes_common_CooMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_14_hermes_common_CooMatrix = &__pyx_type_14_hermes_common_CooMatrix;
  __pyx_type_14_hermes_common_CSRMatrix.tp_base = __pyx_ptype_14_hermes_common_SparseMatrix;
  if (PyType_Ready(&__pyx_type_14_hermes_common_CSRMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CSRMatrix", (PyObject *)&__pyx_type_14_hermes_common_CSRMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_14_hermes_common_CSRMatrix = &__pyx_type_14_hermes_common_CSRMatrix;
  __pyx_type_14_hermes_common_CSCMatrix.tp_base = __pyx_ptype_14_hermes_common_SparseMatrix;
  if (PyType_Ready(&__pyx_type_14_hermes_common_CSCMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "CSCMatrix", (PyObject *)&__pyx_type_14_hermes_common_CSCMatrix) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_14_hermes_common_CSCMatrix = &__pyx_type_14_hermes_common_CSCMatrix;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":32
 * cdef class CooMatrix(SparseMatrix):
 * 
 *     def __init__(self, size=0, is_complex=False):             # <<<<<<<<<<<<<<
 *         self.thisptr = <c_Matrix *>new_CooMatrix(size, is_complex)
 * 
 */
  __pyx_t_1 = __Pyx_PyBool_FromLong(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_1 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":42
 * 
 *     @property
 *     def row_col_data(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CooMatrix, __pyx_n_s__row_col_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CooMatrix->tp_dict, __pyx_n_s__row_col_data, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CooMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":99
 * 
 *     @property
 *     def IA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CSRMatrix, __pyx_n_s__IA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CSRMatrix->tp_dict, __pyx_n_s__IA, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CSRMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":107
 * 
 *     @property
 *     def JA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CSRMatrix, __pyx_n_s__JA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CSRMatrix->tp_dict, __pyx_n_s__JA, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CSRMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":115
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CSRMatrix, __pyx_n_s__A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CSRMatrix->tp_dict, __pyx_n_s__A, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CSRMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":153
 * 
 *     @property
 *     def IA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CSCMatrix, __pyx_n_s__IA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CSCMatrix->tp_dict, __pyx_n_s__IA, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CSCMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":161
 * 
 *     @property
 *     def JA(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CSCMatrix, __pyx_n_s__JA); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CSCMatrix->tp_dict, __pyx_n_s__JA, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CSCMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":169
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         """
 *         Returns (row, col, data) arrays.
 */
  __pyx_t_1 = __Pyx_GetName((PyObject *)__pyx_ptype_14_hermes_common_CSCMatrix, __pyx_n_s__A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_14_hermes_common_CSCMatrix->tp_dict, __pyx_n_s__A, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_14_hermes_common_CSCMatrix);

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":215
 * # Common C++ <-> Python+NumPy conversion tools:
 * 
 * import sys             # <<<<<<<<<<<<<<
 * import traceback
 * # this is important to be called here, otherwise we can't use the NumPy C/API:
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__sys), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":216
 * 
 * import sys
 * import traceback             # <<<<<<<<<<<<<<
 * # this is important to be called here, otherwise we can't use the NumPy C/API:
 * import_array()
 */
  __pyx_t_1 = __Pyx_Import(((PyObject *)__pyx_n_s__traceback), 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__traceback, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 216; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":218
 * import traceback
 * # this is important to be called here, otherwise we can't use the NumPy C/API:
 * import_array()             # <<<<<<<<<<<<<<
 * 
 * cdef api object namespace_create():
 */
  import_array();

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":234
 *     return namespace.get(name)
 * 
 * global_namespace = namespace_create()             # <<<<<<<<<<<<<<
 * 
 * cdef api void cmd(const_char_p text):
 */
  __pyx_t_1 = namespace_create(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s__global_namespace, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":344
 *     return PyArray_SimpleNewFromData(1, &dim, NPY_COMPLEX128, A)
 * 
 * _AA = None             # <<<<<<<<<<<<<<
 * 
 * cdef api void numpy2c_int_inplace(object A_n, int **A_c, int *n):
 */
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s___AA, Py_None) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 344; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":434
 *     init_global_empty_tuple()
 * 
 * init_global_empty_tuple()             # <<<<<<<<<<<<<<
 */
  init_global_empty_tuple();

  /* "/home/ondrej/repos/hermes_common/_hermes_common.pyx":1
 * # Copyright (c) 2009 hp-FEM group at the University of Nevada, Reno (UNR).             # <<<<<<<<<<<<<<
 * # Distributed under the terms of the BSD license (see the LICENSE
 * # file for the exact terms).
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CooMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__row_col_data); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_12), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CooMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__to_scipy_coo); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_13), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSRMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__IA); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_14), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSRMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__JA); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_15), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSRMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__A); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_16), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSRMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__to_scipy_csr); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_17), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSCMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__IA); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_18), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSCMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__JA); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_19), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSCMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__A); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_20), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__CSCMatrix); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__to_scipy_csc); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_21), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init _hermes_common");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init _hermes_common");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

static const char *__pyx_filenames[] = {
  "_hermes_common.pyx",
  "_hermes_common.pxd",
};

/* Runtime support code */

static void __pyx_init_filenames(void) {
  __pyx_f = __pyx_filenames;
}

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
        #if PY_VERSION_HEX < 0x02050000
                 "need more than %d value%s to unpack", (int)index,
        #else
                 "need more than %zd value%s to unpack", index,
        #endif
                 (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(void) {
    PyErr_SetString(PyExc_ValueError, "too many values to unpack");
}

static PyObject *__Pyx_UnpackItem(PyObject *iter, Py_ssize_t index) {
    PyObject *item;
    if (!(item = PyIter_Next(iter))) {
        if (!PyErr_Occurred()) {
            __Pyx_RaiseNeedMoreValuesError(index);
        }
    }
    return item;
}

static int __Pyx_EndUnpack(PyObject *iter) {
    PyObject *item;
    if ((item = PyIter_Next(iter))) {
        Py_DECREF(item);
        __Pyx_RaiseTooManyValuesError();
        return -1;
    }
    else if (!PyErr_Occurred())
        return 0;
    else
        return -1;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_Format(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
    if (unlikely(tstate->curexc_type))
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
        goto bad;
    #endif
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
    Py_INCREF(local_type);
    Py_INCREF(local_value);
    Py_INCREF(local_tb);
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    /* Make sure tstate is in a consistent state when we XDECREF
       these objects (XDECREF may run arbitrary code). */
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}


#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
/*
    static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
#if HAVE_HYPOT
        return hypot(z.real, z.imag);
#else
        return sqrt(z.real*z.real + z.imag*z.imag);
#endif
    }
*/
#endif

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}

static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list) {
    PyObject *py_import = 0;
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    py_import = __Pyx_GetAttrString(__pyx_b, "__import__");
    if (!py_import)
        goto bad;
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    module = PyObject_CallFunctionObjArgs(py_import,
        name, global_dict, empty_dict, list, NULL);
bad:
    Py_XDECREF(empty_list);
    Py_XDECREF(py_import);
    Py_XDECREF(empty_dict);
    return module;
}

static __pyx_t_double_complex __Pyx_PyComplex_As___pyx_t_double_complex(PyObject* o) {
    Py_complex cval;
    if (PyComplex_CheckExact(o))
        cval = ((PyComplexObject *)o)->cval;
    else
        cval = PyComplex_AsCComplex(o);
    return __pyx_t_double_complex_from_parts(
               (double)cval.real,
               (double)cval.imag);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();

    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}

static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;

    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}


#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    Py_XINCREF(type);
    Py_XINCREF(value);
    Py_XINCREF(tb);
    /* First, check the traceback argument, replacing None with NULL. */
    if (tb == Py_None) {
        Py_DECREF(tb);
        tb = 0;
    }
    else if (tb != NULL && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto raise_error;
    }
    /* Next, replace a missing value with None */
    if (value == NULL) {
        value = Py_None;
        Py_INCREF(value);
    }
    #if PY_VERSION_HEX < 0x02050000
    if (!PyClass_Check(type))
    #else
    if (!PyType_Check(type))
    #endif
    {
        /* Raising an instance.  The value should be a dummy. */
        if (value != Py_None) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        /* Normalize to raise <class>, <instance> */
        Py_DECREF(value);
        value = type;
        #if PY_VERSION_HEX < 0x02050000
            if (PyInstance_Check(type)) {
                type = (PyObject*) ((PyInstanceObject*)type)->in_class;
                Py_INCREF(type);
            }
            else {
                type = 0;
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception must be an old-style class or instance");
                goto raise_error;
            }
        #else
            type = (PyObject*) Py_TYPE(type);
            Py_INCREF(type);
            if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
                PyErr_SetString(PyExc_TypeError,
                    "raise: exception class must be a subclass of BaseException");
                goto raise_error;
            }
        #endif
    }

    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}

#else /* Python 3+ */

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb) {
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;

    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (!PyExceptionClass_Check(type)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }

    PyErr_SetObject(type, value);

    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }

bad:
    return;
}
#endif

#if PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}

static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    PyObject* v;
    int i;

    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                return -1;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            return -1;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0 &&
                isspace(Py_CHARMASK(s[len-1])) &&
                s[len-1] != ' ')
                    PyFile_SoftSpace(f, 0);
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            return -1;
        PyFile_SoftSpace(f, 0);
    }
    return 0;
}

#else /* Python 3 has a print function */

static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = __Pyx_GetAttrString(__pyx_b, "print");
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItemString(kwargs, "file", stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItemString(kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItemString(__pyx_print_kwargs, "end", end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}

#endif

#if PY_MAJOR_VERSION < 3

static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            return -1;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        return -1;
    if (PyFile_WriteString("\n", f) < 0)
        return -1;
    return 0;
    /* the line below is just to avoid compiler
     * compiler warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}

#else /* Python 3 has a print function */

static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_New(1);
    if (unlikely(!arg_tuple))
        return -1;
    Py_INCREF(o);
    PyTuple_SET_ITEM(arg_tuple, 0, o);
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}

#endif

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static void __Pyx_WriteUnraisable(const char *name) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;

    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX < 0x03010000
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#else
    cobj = PyCapsule_New(tmp.p, sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    long size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];

    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(class_name);
    #else
    py_name = PyUnicode_FromString(class_name);
    #endif
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError, 
            "%s.%s is not a type object",
            module_name, class_name);
        goto bad;
    }
    if (!strict && ((PyTypeObject *)result)->tp_basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning), 
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        #if PY_VERSION_HEX < 0x02050000
        PyErr_Warn(NULL, warning);
        #else
        PyErr_WarnEx(NULL, warning, 0);
        #endif
    }
    else if (((PyTypeObject *)result)->tp_basicsize != size) {
        PyErr_Format(PyExc_ValueError, 
            "%s.%s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;

    #if PY_MAJOR_VERSION < 3
    py_name = PyString_FromString(name);
    #else
    py_name = PyUnicode_FromString(name);
    #endif
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
